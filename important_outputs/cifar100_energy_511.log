[25/04/19 19:16:22] [utils.py:   37]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/04/19 19:16:22] [utils.py:   39]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar100
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 100
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data/cifar100
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 0.1
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: energy_bn_adam-1-0.001-200_uncond-20-0.1-0.01-10000-0.05_250419-191622.txt
LOG_TIME: 250419-191622
MODEL:
  ADAPTATION: energy
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 511
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar100/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/gpfs/home5/scur2578/tea/main.py:33: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(os.path.join(cfg.CKPT_DIR ,'{}/{}.pth'.format(cfg.CORRUPTION.DATASET, cfg.MODEL.ARCH)))
[25/04/19 19:16:23] [main.py:   66]: test-time adaptation: ENERGY
[25/04/19 19:16:23] [param.py:   18]: adapting weights of batch-normalization layer
[25/04/19 19:16:23] [setada.py:  138]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=100, bias=True)
)
[25/04/19 19:16:23] [setada.py:  139]: params for adaptation: ['block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'bn1.weight', 'bn1.bias']
[25/04/19 19:16:23] [setada.py:  140]: optimizer for adaptation: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0.0
)
[25/04/19 19:16:23] [eval.py:   70]: resetting model
[25/04/19 19:17:46] [eval.py:   78]: acc % [gaussian_noise5]: 53.41%
[25/04/19 19:17:46] [eval.py:   70]: resetting model
[25/04/19 19:19:07] [eval.py:   78]: acc % [gaussian_noise4]: 56.11%
[25/04/19 19:19:07] [eval.py:   70]: resetting model
[25/04/19 19:20:29] [eval.py:   78]: acc % [gaussian_noise3]: 58.69%
[25/04/19 19:20:29] [eval.py:   70]: resetting model
[25/04/19 19:21:50] [eval.py:   78]: acc % [gaussian_noise2]: 63.94%
[25/04/19 19:21:50] [eval.py:   70]: resetting model
[25/04/19 19:23:12] [eval.py:   78]: acc % [gaussian_noise1]: 70.42%
[25/04/19 19:23:12] [eval.py:   70]: resetting model
[25/04/19 19:24:33] [eval.py:   78]: acc % [shot_noise5]: 54.82%
[25/04/19 19:24:33] [eval.py:   70]: resetting model
[25/04/19 19:25:55] [eval.py:   78]: acc % [shot_noise4]: 60.04%
[25/04/19 19:25:55] [eval.py:   70]: resetting model
[25/04/19 19:27:16] [eval.py:   78]: acc % [shot_noise3]: 63.17%
[25/04/19 19:27:16] [eval.py:   70]: resetting model
[25/04/19 19:28:38] [eval.py:   78]: acc % [shot_noise2]: 69.84%
[25/04/19 19:28:38] [eval.py:   70]: resetting model
[25/04/19 19:29:59] [eval.py:   78]: acc % [shot_noise1]: 72.85%
[25/04/19 19:29:59] [eval.py:   70]: resetting model
[25/04/19 19:31:21] [eval.py:   78]: acc % [impulse_noise5]: 46.09%
[25/04/19 19:31:21] [eval.py:   70]: resetting model
[25/04/19 19:32:42] [eval.py:   78]: acc % [impulse_noise4]: 53.41%
[25/04/19 19:32:42] [eval.py:   70]: resetting model
[25/04/19 19:34:03] [eval.py:   78]: acc % [impulse_noise3]: 61.71%
[25/04/19 19:34:03] [eval.py:   70]: resetting model
[25/04/19 19:35:25] [eval.py:   78]: acc % [impulse_noise2]: 66.20%
[25/04/19 19:35:25] [eval.py:   70]: resetting model
[25/04/19 19:36:46] [eval.py:   78]: acc % [impulse_noise1]: 72.13%
[25/04/19 19:36:46] [eval.py:   70]: resetting model
[25/04/19 19:38:08] [eval.py:   78]: acc % [defocus_blur5]: 71.22%
[25/04/19 19:38:08] [eval.py:   70]: resetting model
[25/04/19 19:39:29] [eval.py:   78]: acc % [defocus_blur4]: 76.16%
[25/04/19 19:39:29] [eval.py:   70]: resetting model
[25/04/19 19:40:51] [eval.py:   78]: acc % [defocus_blur3]: 78.36%
[25/04/19 19:40:51] [eval.py:   70]: resetting model
[25/04/19 19:42:12] [eval.py:   78]: acc % [defocus_blur2]: 78.46%
[25/04/19 19:42:12] [eval.py:   70]: resetting model
[25/04/19 19:43:34] [eval.py:   78]: acc % [defocus_blur1]: 78.69%
[25/04/19 19:43:34] [eval.py:   70]: resetting model
[25/04/19 19:44:55] [eval.py:   78]: acc % [glass_blur5]: 50.43%
[25/04/19 19:44:55] [eval.py:   70]: resetting model
[25/04/19 19:46:17] [eval.py:   78]: acc % [glass_blur4]: 50.97%
[25/04/19 19:46:17] [eval.py:   70]: resetting model
[25/04/19 19:47:38] [eval.py:   78]: acc % [glass_blur3]: 61.32%
[25/04/19 19:47:38] [eval.py:   70]: resetting model
[25/04/19 19:49:00] [eval.py:   78]: acc % [glass_blur2]: 62.06%
[25/04/19 19:49:00] [eval.py:   70]: resetting model
[25/04/19 19:50:21] [eval.py:   78]: acc % [glass_blur1]: 61.18%
[25/04/19 19:50:21] [eval.py:   70]: resetting model
[25/04/19 19:51:42] [eval.py:   78]: acc % [motion_blur5]: 69.54%
[25/04/19 19:51:42] [eval.py:   70]: resetting model
[25/04/19 19:53:04] [eval.py:   78]: acc % [motion_blur4]: 72.54%
[25/04/19 19:53:04] [eval.py:   70]: resetting model
[25/04/19 19:54:25] [eval.py:   78]: acc % [motion_blur3]: 72.57%
[25/04/19 19:54:25] [eval.py:   70]: resetting model
[25/04/19 19:55:47] [eval.py:   78]: acc % [motion_blur2]: 74.93%
[25/04/19 19:55:47] [eval.py:   70]: resetting model
[25/04/19 19:57:08] [eval.py:   78]: acc % [motion_blur1]: 76.09%
[25/04/19 19:57:08] [eval.py:   70]: resetting model
[25/04/19 19:58:30] [eval.py:   78]: acc % [zoom_blur5]: 71.72%
[25/04/19 19:58:30] [eval.py:   70]: resetting model
[25/04/19 19:59:51] [eval.py:   78]: acc % [zoom_blur4]: 73.48%
[25/04/19 19:59:51] [eval.py:   70]: resetting model
[25/04/19 20:01:13] [eval.py:   78]: acc % [zoom_blur3]: 75.11%
[25/04/19 20:01:13] [eval.py:   70]: resetting model
[25/04/19 20:02:34] [eval.py:   78]: acc % [zoom_blur2]: 76.11%
[25/04/19 20:02:34] [eval.py:   70]: resetting model
[25/04/19 20:03:56] [eval.py:   78]: acc % [zoom_blur1]: 76.87%
[25/04/19 20:03:56] [eval.py:   70]: resetting model
[25/04/19 20:05:17] [eval.py:   78]: acc % [snow5]: 65.22%
[25/04/19 20:05:17] [eval.py:   70]: resetting model
[25/04/19 20:06:38] [eval.py:   78]: acc % [snow4]: 66.74%
[25/04/19 20:06:38] [eval.py:   70]: resetting model
[25/04/19 20:08:00] [eval.py:   78]: acc % [snow3]: 69.00%
[25/04/19 20:08:00] [eval.py:   70]: resetting model
[25/04/19 20:09:21] [eval.py:   78]: acc % [snow2]: 69.65%
[25/04/19 20:09:21] [eval.py:   70]: resetting model
[25/04/19 20:10:43] [eval.py:   78]: acc % [snow1]: 74.63%
[25/04/19 20:10:43] [eval.py:   70]: resetting model
[25/04/19 20:12:04] [eval.py:   78]: acc % [frost5]: 64.09%
[25/04/19 20:12:04] [eval.py:   70]: resetting model
[25/04/19 20:13:26] [eval.py:   78]: acc % [frost4]: 67.56%
[25/04/19 20:13:26] [eval.py:   70]: resetting model
[25/04/19 20:14:47] [eval.py:   78]: acc % [frost3]: 67.27%
[25/04/19 20:14:47] [eval.py:   70]: resetting model
[25/04/19 20:16:09] [eval.py:   78]: acc % [frost2]: 71.37%
[25/04/19 20:16:09] [eval.py:   70]: resetting model
[25/04/19 20:17:30] [eval.py:   78]: acc % [frost1]: 74.76%
[25/04/19 20:17:30] [eval.py:   70]: resetting model
[25/04/19 20:18:52] [eval.py:   78]: acc % [fog5]: 66.57%
[25/04/19 20:18:52] [eval.py:   70]: resetting model
[25/04/19 20:20:13] [eval.py:   78]: acc % [fog4]: 74.22%
[25/04/19 20:20:13] [eval.py:   70]: resetting model
[25/04/19 20:21:34] [eval.py:   78]: acc % [fog3]: 75.95%
[25/04/19 20:21:34] [eval.py:   70]: resetting model
[25/04/19 20:22:56] [eval.py:   78]: acc % [fog2]: 77.41%
[25/04/19 20:22:56] [eval.py:   70]: resetting model
[25/04/19 20:24:17] [eval.py:   78]: acc % [fog1]: 78.13%
[25/04/19 20:24:17] [eval.py:   70]: resetting model
[25/04/19 20:25:39] [eval.py:   78]: acc % [brightness5]: 74.09%
[25/04/19 20:25:39] [eval.py:   70]: resetting model
[25/04/19 20:27:00] [eval.py:   78]: acc % [brightness4]: 77.00%
[25/04/19 20:27:00] [eval.py:   70]: resetting model
[25/04/19 20:28:22] [eval.py:   78]: acc % [brightness3]: 77.85%
[25/04/19 20:28:22] [eval.py:   70]: resetting model
[25/04/19 20:29:43] [eval.py:   78]: acc % [brightness2]: 78.13%
[25/04/19 20:29:43] [eval.py:   70]: resetting model
[25/04/19 20:31:05] [eval.py:   78]: acc % [brightness1]: 78.74%
[25/04/19 20:31:05] [eval.py:   70]: resetting model
[25/04/19 20:32:26] [eval.py:   78]: acc % [contrast5]: 69.95%
[25/04/19 20:32:26] [eval.py:   70]: resetting model
[25/04/19 20:33:48] [eval.py:   78]: acc % [contrast4]: 74.82%
[25/04/19 20:33:48] [eval.py:   70]: resetting model
[25/04/19 20:35:09] [eval.py:   78]: acc % [contrast3]: 76.21%
[25/04/19 20:35:09] [eval.py:   70]: resetting model
[25/04/19 20:36:31] [eval.py:   78]: acc % [contrast2]: 77.00%
[25/04/19 20:36:31] [eval.py:   70]: resetting model
[25/04/19 20:37:52] [eval.py:   78]: acc % [contrast1]: 78.20%
[25/04/19 20:37:52] [eval.py:   70]: resetting model
[25/04/19 20:39:13] [eval.py:   78]: acc % [elastic_transform5]: 59.86%
[25/04/19 20:39:13] [eval.py:   70]: resetting model
[25/04/19 20:40:35] [eval.py:   78]: acc % [elastic_transform4]: 66.53%
[25/04/19 20:40:35] [eval.py:   70]: resetting model
[25/04/19 20:41:56] [eval.py:   78]: acc % [elastic_transform3]: 73.23%
[25/04/19 20:41:56] [eval.py:   70]: resetting model
[25/04/19 20:43:18] [eval.py:   78]: acc % [elastic_transform2]: 74.11%
[25/04/19 20:43:18] [eval.py:   70]: resetting model
[25/04/19 20:44:39] [eval.py:   78]: acc % [elastic_transform1]: 72.90%
[25/04/19 20:44:39] [eval.py:   70]: resetting model
[25/04/19 20:46:01] [eval.py:   78]: acc % [pixelate5]: 65.48%
[25/04/19 20:46:01] [eval.py:   70]: resetting model
[25/04/19 20:47:22] [eval.py:   78]: acc % [pixelate4]: 71.50%
[25/04/19 20:47:22] [eval.py:   70]: resetting model
[25/04/19 20:48:44] [eval.py:   78]: acc % [pixelate3]: 73.65%
[25/04/19 20:48:44] [eval.py:   70]: resetting model
[25/04/19 20:50:05] [eval.py:   78]: acc % [pixelate2]: 74.54%
[25/04/19 20:50:05] [eval.py:   70]: resetting model
[25/04/19 20:51:26] [eval.py:   78]: acc % [pixelate1]: 76.09%
[25/04/19 20:51:26] [eval.py:   70]: resetting model
[25/04/19 20:52:48] [eval.py:   78]: acc % [jpeg_compression5]: 55.04%
[25/04/19 20:52:48] [eval.py:   70]: resetting model
[25/04/19 20:54:09] [eval.py:   78]: acc % [jpeg_compression4]: 57.91%
[25/04/19 20:54:09] [eval.py:   70]: resetting model
[25/04/19 20:55:31] [eval.py:   78]: acc % [jpeg_compression3]: 60.30%
[25/04/19 20:55:31] [eval.py:   70]: resetting model
[25/04/19 20:56:52] [eval.py:   78]: acc % [jpeg_compression2]: 62.49%
[25/04/19 20:56:52] [eval.py:   70]: resetting model
[25/04/19 20:58:14] [eval.py:   78]: acc % [jpeg_compression1]: 68.59%
[25/04/19 20:58:14] [eval.py:   84]: 
                         1         2        3         4        5       avg
gaussian_noise     0.53410  0.561100  0.58690  0.639400  0.70420  0.605140
shot_noise         0.54820  0.600400  0.63170  0.698400  0.72850  0.641440
impulse_noise      0.46090  0.534100  0.61710  0.662000  0.72130  0.599080
defocus_blur       0.71220  0.761600  0.78360  0.784600  0.78690  0.765780
glass_blur         0.50430  0.509700  0.61320  0.620600  0.61180  0.571920
motion_blur        0.69540  0.725400  0.72570  0.749300  0.76090  0.731340
zoom_blur          0.71720  0.734800  0.75110  0.761100  0.76870  0.746580
snow               0.65220  0.667400  0.69000  0.696500  0.74630  0.690480
frost              0.64090  0.675600  0.67270  0.713700  0.74760  0.690100
fog                0.66570  0.742200  0.75950  0.774100  0.78130  0.744560
brightness         0.74090  0.770000  0.77850  0.781300  0.78740  0.771620
contrast           0.69950  0.748200  0.76210  0.770000  0.78200  0.752360
elastic_transform  0.59860  0.665300  0.73230  0.741100  0.72900  0.693260
pixelate           0.65480  0.715000  0.73650  0.745400  0.76090  0.722520
jpeg_compression   0.55040  0.579100  0.60300  0.624900  0.68590  0.608660
average            0.62502  0.665993  0.69626  0.717493  0.74018  0.688989
[25/04/19 20:58:14] [eval.py:  125]: resetting model
[25/04/19 20:59:37] [eval.py:  137]: Test set Accuracy: 0.7826
Building model...
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
Files already downloaded and verified
torch.Size([10000, 3, 32, 32]) 10000
