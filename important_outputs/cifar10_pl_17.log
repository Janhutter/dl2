[25/04/20 20:30:21] [utils.py:   37]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/04/20 20:30:21] [utils.py:   39]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 10
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data/cifar10
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 1.0
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: pl_bn_sgd-1-0.0001-200_250420-203021.txt
LOG_TIME: 250420-203021
MODEL:
  ADAPTATION: pl
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.0001
  METHOD: SGD
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 17
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar10/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/home/scur2578/.local/lib/python3.9/site-packages/robustbench/utils.py:165: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
[25/04/20 20:30:22] [main.py:   75]: test-time adaptation: PL
[25/04/20 20:30:22] [setada.py:  187]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/04/20 20:30:22] [eval.py:   70]: resetting model
[25/04/20 20:30:29] [eval.py:   78]: acc % [gaussian_noise5]: 11.13%
[25/04/20 20:30:29] [eval.py:   70]: resetting model
[25/04/20 20:30:35] [eval.py:   78]: acc % [gaussian_noise4]: 11.25%
[25/04/20 20:30:35] [eval.py:   70]: resetting model
[25/04/20 20:30:41] [eval.py:   78]: acc % [gaussian_noise3]: 12.27%
[25/04/20 20:30:41] [eval.py:   70]: resetting model
[25/04/20 20:30:46] [eval.py:   78]: acc % [gaussian_noise2]: 19.64%
[25/04/20 20:30:46] [eval.py:   70]: resetting model
[25/04/20 20:30:52] [eval.py:   78]: acc % [gaussian_noise1]: 83.99%
[25/04/20 20:30:52] [eval.py:   70]: resetting model
[25/04/20 20:30:58] [eval.py:   78]: acc % [shot_noise5]: 11.19%
[25/04/20 20:30:58] [eval.py:   70]: resetting model
[25/04/20 20:31:03] [eval.py:   78]: acc % [shot_noise4]: 12.59%
[25/04/20 20:31:03] [eval.py:   70]: resetting model
[25/04/20 20:31:09] [eval.py:   78]: acc % [shot_noise3]: 13.44%
[25/04/20 20:31:09] [eval.py:   70]: resetting model
[25/04/20 20:31:15] [eval.py:   78]: acc % [shot_noise2]: 82.14%
[25/04/20 20:31:15] [eval.py:   70]: resetting model
[25/04/20 20:31:20] [eval.py:   78]: acc % [shot_noise1]: 87.66%
[25/04/20 20:31:20] [eval.py:   70]: resetting model
[25/04/20 20:31:26] [eval.py:   78]: acc % [impulse_noise5]: 11.04%
[25/04/20 20:31:26] [eval.py:   70]: resetting model
[25/04/20 20:31:32] [eval.py:   78]: acc % [impulse_noise4]: 12.21%
[25/04/20 20:31:32] [eval.py:   70]: resetting model
[25/04/20 20:31:37] [eval.py:   78]: acc % [impulse_noise3]: 27.34%
[25/04/20 20:31:37] [eval.py:   70]: resetting model
[25/04/20 20:31:43] [eval.py:   78]: acc % [impulse_noise2]: 63.54%
[25/04/20 20:31:43] [eval.py:   70]: resetting model
[25/04/20 20:31:49] [eval.py:   78]: acc % [impulse_noise1]: 83.37%
[25/04/20 20:31:49] [eval.py:   70]: resetting model
[25/04/20 20:31:54] [eval.py:   78]: acc % [defocus_blur5]: 16.52%
[25/04/20 20:31:54] [eval.py:   70]: resetting model
[25/04/20 20:32:00] [eval.py:   78]: acc % [defocus_blur4]: 85.63%
[25/04/20 20:32:00] [eval.py:   70]: resetting model
[25/04/20 20:32:06] [eval.py:   78]: acc % [defocus_blur3]: 90.74%
[25/04/20 20:32:06] [eval.py:   70]: resetting model
[25/04/20 20:32:11] [eval.py:   78]: acc % [defocus_blur2]: 92.76%
[25/04/20 20:32:11] [eval.py:   70]: resetting model
[25/04/20 20:32:17] [eval.py:   78]: acc % [defocus_blur1]: 93.47%
[25/04/20 20:32:17] [eval.py:   70]: resetting model
[25/04/20 20:32:23] [eval.py:   78]: acc % [glass_blur5]: 12.88%
[25/04/20 20:32:23] [eval.py:   70]: resetting model
[25/04/20 20:32:28] [eval.py:   78]: acc % [glass_blur4]: 12.65%
[25/04/20 20:32:28] [eval.py:   70]: resetting model
[25/04/20 20:32:34] [eval.py:   78]: acc % [glass_blur3]: 37.22%
[25/04/20 20:32:34] [eval.py:   70]: resetting model
[25/04/20 20:32:40] [eval.py:   78]: acc % [glass_blur2]: 41.75%
[25/04/20 20:32:40] [eval.py:   70]: resetting model
[25/04/20 20:32:45] [eval.py:   78]: acc % [glass_blur1]: 24.31%
[25/04/20 20:32:45] [eval.py:   70]: resetting model
[25/04/20 20:32:51] [eval.py:   78]: acc % [motion_blur5]: 26.48%
[25/04/20 20:32:51] [eval.py:   70]: resetting model
[25/04/20 20:32:57] [eval.py:   78]: acc % [motion_blur4]: 82.53%
[25/04/20 20:32:57] [eval.py:   70]: resetting model
[25/04/20 20:33:02] [eval.py:   78]: acc % [motion_blur3]: 84.35%
[25/04/20 20:33:02] [eval.py:   70]: resetting model
[25/04/20 20:33:08] [eval.py:   78]: acc % [motion_blur2]: 86.65%
[25/04/20 20:33:08] [eval.py:   70]: resetting model
[25/04/20 20:33:14] [eval.py:   78]: acc % [motion_blur1]: 90.62%
[25/04/20 20:33:14] [eval.py:   70]: resetting model
[25/04/20 20:33:19] [eval.py:   78]: acc % [zoom_blur5]: 68.42%
[25/04/20 20:33:19] [eval.py:   70]: resetting model
[25/04/20 20:33:25] [eval.py:   78]: acc % [zoom_blur4]: 81.96%
[25/04/20 20:33:25] [eval.py:   70]: resetting model
[25/04/20 20:33:31] [eval.py:   78]: acc % [zoom_blur3]: 85.54%
[25/04/20 20:33:31] [eval.py:   70]: resetting model
[25/04/20 20:33:36] [eval.py:   78]: acc % [zoom_blur2]: 88.60%
[25/04/20 20:33:36] [eval.py:   70]: resetting model
[25/04/20 20:33:42] [eval.py:   78]: acc % [zoom_blur1]: 90.03%
[25/04/20 20:33:42] [eval.py:   70]: resetting model
[25/04/20 20:33:48] [eval.py:   78]: acc % [snow5]: 42.70%
[25/04/20 20:33:48] [eval.py:   70]: resetting model
[25/04/20 20:33:53] [eval.py:   78]: acc % [snow4]: 77.39%
[25/04/20 20:33:53] [eval.py:   70]: resetting model
[25/04/20 20:33:59] [eval.py:   78]: acc % [snow3]: 79.50%
[25/04/20 20:33:59] [eval.py:   70]: resetting model
[25/04/20 20:34:05] [eval.py:   78]: acc % [snow2]: 77.64%
[25/04/20 20:34:05] [eval.py:   70]: resetting model
[25/04/20 20:34:10] [eval.py:   78]: acc % [snow1]: 87.93%
[25/04/20 20:34:10] [eval.py:   70]: resetting model
[25/04/20 20:34:16] [eval.py:   78]: acc % [frost5]: 58.71%
[25/04/20 20:34:16] [eval.py:   70]: resetting model
[25/04/20 20:34:22] [eval.py:   78]: acc % [frost4]: 68.09%
[25/04/20 20:34:22] [eval.py:   70]: resetting model
[25/04/20 20:34:27] [eval.py:   78]: acc % [frost3]: 79.66%
[25/04/20 20:34:27] [eval.py:   70]: resetting model
[25/04/20 20:34:33] [eval.py:   78]: acc % [frost2]: 82.07%
[25/04/20 20:34:33] [eval.py:   70]: resetting model
[25/04/20 20:34:39] [eval.py:   78]: acc % [frost1]: 90.01%
[25/04/20 20:34:39] [eval.py:   70]: resetting model
[25/04/20 20:34:44] [eval.py:   78]: acc % [fog5]: 77.02%
[25/04/20 20:34:44] [eval.py:   70]: resetting model
[25/04/20 20:34:50] [eval.py:   78]: acc % [fog4]: 88.39%
[25/04/20 20:34:50] [eval.py:   70]: resetting model
[25/04/20 20:34:56] [eval.py:   78]: acc % [fog3]: 89.98%
[25/04/20 20:34:56] [eval.py:   70]: resetting model
[25/04/20 20:35:01] [eval.py:   78]: acc % [fog2]: 91.67%
[25/04/20 20:35:01] [eval.py:   70]: resetting model
[25/04/20 20:35:07] [eval.py:   78]: acc % [fog1]: 92.60%
[25/04/20 20:35:07] [eval.py:   70]: resetting model
[25/04/20 20:35:13] [eval.py:   78]: acc % [brightness5]: 87.50%
[25/04/20 20:35:13] [eval.py:   70]: resetting model
[25/04/20 20:35:18] [eval.py:   78]: acc % [brightness4]: 92.28%
[25/04/20 20:35:18] [eval.py:   70]: resetting model
[25/04/20 20:35:24] [eval.py:   78]: acc % [brightness3]: 90.78%
[25/04/20 20:35:24] [eval.py:   70]: resetting model
[25/04/20 20:35:30] [eval.py:   78]: acc % [brightness2]: 92.95%
[25/04/20 20:35:30] [eval.py:   70]: resetting model
[25/04/20 20:35:35] [eval.py:   78]: acc % [brightness1]: 92.58%
[25/04/20 20:35:35] [eval.py:   70]: resetting model
[25/04/20 20:35:41] [eval.py:   78]: acc % [contrast5]: 64.53%
[25/04/20 20:35:41] [eval.py:   70]: resetting model
[25/04/20 20:35:47] [eval.py:   78]: acc % [contrast4]: 81.91%
[25/04/20 20:35:47] [eval.py:   70]: resetting model
[25/04/20 20:35:52] [eval.py:   78]: acc % [contrast3]: 89.61%
[25/04/20 20:35:52] [eval.py:   70]: resetting model
[25/04/20 20:35:58] [eval.py:   78]: acc % [contrast2]: 92.12%
[25/04/20 20:35:58] [eval.py:   70]: resetting model
[25/04/20 20:36:04] [eval.py:   78]: acc % [contrast1]: 93.42%
[25/04/20 20:36:04] [eval.py:   70]: resetting model
[25/04/20 20:36:09] [eval.py:   78]: acc % [elastic_transform5]: 70.40%
[25/04/20 20:36:09] [eval.py:   70]: resetting model
[25/04/20 20:36:15] [eval.py:   78]: acc % [elastic_transform4]: 79.97%
[25/04/20 20:36:15] [eval.py:   70]: resetting model
[25/04/20 20:36:21] [eval.py:   78]: acc % [elastic_transform3]: 86.34%
[25/04/20 20:36:21] [eval.py:   70]: resetting model
[25/04/20 20:36:26] [eval.py:   78]: acc % [elastic_transform2]: 89.31%
[25/04/20 20:36:26] [eval.py:   70]: resetting model
[25/04/20 20:36:32] [eval.py:   78]: acc % [elastic_transform1]: 89.94%
[25/04/20 20:36:32] [eval.py:   70]: resetting model
[25/04/20 20:36:38] [eval.py:   78]: acc % [pixelate5]: 14.57%
[25/04/20 20:36:38] [eval.py:   70]: resetting model
[25/04/20 20:36:43] [eval.py:   78]: acc % [pixelate4]: 74.43%
[25/04/20 20:36:43] [eval.py:   70]: resetting model
[25/04/20 20:36:49] [eval.py:   78]: acc % [pixelate3]: 86.49%
[25/04/20 20:36:49] [eval.py:   70]: resetting model
[25/04/20 20:36:55] [eval.py:   78]: acc % [pixelate2]: 85.23%
[25/04/20 20:36:55] [eval.py:   70]: resetting model
[25/04/20 20:37:00] [eval.py:   78]: acc % [pixelate1]: 91.49%
[25/04/20 20:37:00] [eval.py:   70]: resetting model
[25/04/20 20:37:06] [eval.py:   78]: acc % [jpeg_compression5]: 30.89%
[25/04/20 20:37:06] [eval.py:   70]: resetting model
[25/04/20 20:37:12] [eval.py:   78]: acc % [jpeg_compression4]: 46.79%
[25/04/20 20:37:12] [eval.py:   70]: resetting model
[25/04/20 20:37:17] [eval.py:   78]: acc % [jpeg_compression3]: 67.38%
[25/04/20 20:37:17] [eval.py:   70]: resetting model
[25/04/20 20:37:23] [eval.py:   78]: acc % [jpeg_compression2]: 74.40%
[25/04/20 20:37:23] [eval.py:   70]: resetting model
[25/04/20 20:37:29] [eval.py:   78]: acc % [jpeg_compression1]: 73.38%
[25/04/20 20:37:29] [eval.py:   84]: 
                          1        2         3         4       5       avg
gaussian_noise     0.111300  0.11250  0.122700  0.196400  0.8399  0.276560
shot_noise         0.111900  0.12590  0.134400  0.821400  0.8766  0.414040
impulse_noise      0.110400  0.12210  0.273400  0.635400  0.8337  0.395000
defocus_blur       0.165200  0.85630  0.907400  0.927600  0.9347  0.758240
glass_blur         0.128800  0.12650  0.372200  0.417500  0.2431  0.257620
motion_blur        0.264800  0.82530  0.843500  0.866500  0.9062  0.741260
zoom_blur          0.684200  0.81960  0.855400  0.886000  0.9003  0.829100
snow               0.427000  0.77390  0.795000  0.776400  0.8793  0.730320
frost              0.587100  0.68090  0.796600  0.820700  0.9001  0.757080
fog                0.770200  0.88390  0.899800  0.916700  0.9260  0.879320
brightness         0.875000  0.92280  0.907800  0.929500  0.9258  0.912180
contrast           0.645300  0.81910  0.896100  0.921200  0.9342  0.843180
elastic_transform  0.704000  0.79970  0.863400  0.893100  0.8994  0.831920
pixelate           0.145700  0.74430  0.864900  0.852300  0.9149  0.704420
jpeg_compression   0.308900  0.46790  0.673800  0.744000  0.7338  0.585680
average            0.402653  0.60538  0.680427  0.773647  0.8432  0.661061
[25/04/20 20:37:29] [eval.py:  125]: resetting model
[25/04/20 20:37:36] [eval.py:  137]: Test set Accuracy: 0.9364
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
Files already downloaded and verified
torch.Size([10000, 3, 32, 32]) 10000
