[25/04/20 15:49:15] [utils.py:   37]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/04/20 15:49:15] [utils.py:   39]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 10
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data/cifar10
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 0.1
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: energy_bn_adam-1-0.001-200_uncond-20-0.1-0.01-10000-0.05_250420-154915.txt
LOG_TIME: 250420-154915
MODEL:
  ADAPTATION: energy
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 17
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar10/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/home/scur2578/.local/lib/python3.9/site-packages/robustbench/utils.py:165: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
[25/04/20 15:49:16] [main.py:   66]: test-time adaptation: ENERGY
[25/04/20 15:49:16] [param.py:   18]: adapting weights of batch-normalization layer
[25/04/20 15:49:16] [setada.py:  138]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/04/20 15:49:16] [setada.py:  139]: params for adaptation: ['block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'bn1.weight', 'bn1.bias']
[25/04/20 15:49:16] [setada.py:  140]: optimizer for adaptation: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0.0
)
[25/04/20 15:49:16] [eval.py:   70]: resetting model
[25/04/20 15:50:39] [eval.py:   78]: acc % [gaussian_noise5]: 78.07%
[25/04/20 15:50:39] [eval.py:   70]: resetting model
[25/04/20 15:52:00] [eval.py:   78]: acc % [gaussian_noise4]: 80.39%
[25/04/20 15:52:00] [eval.py:   70]: resetting model
[25/04/20 15:53:22] [eval.py:   78]: acc % [gaussian_noise3]: 82.49%
[25/04/20 15:53:22] [eval.py:   70]: resetting model
[25/04/20 15:54:43] [eval.py:   78]: acc % [gaussian_noise2]: 86.17%
[25/04/20 15:54:43] [eval.py:   70]: resetting model
[25/04/20 15:56:04] [eval.py:   78]: acc % [gaussian_noise1]: 89.82%
[25/04/20 15:56:04] [eval.py:   70]: resetting model
[25/04/20 15:57:26] [eval.py:   78]: acc % [shot_noise5]: 79.80%
[25/04/20 15:57:26] [eval.py:   70]: resetting model
[25/04/20 15:58:47] [eval.py:   78]: acc % [shot_noise4]: 83.99%
[25/04/20 15:58:47] [eval.py:   70]: resetting model
[25/04/20 16:00:08] [eval.py:   78]: acc % [shot_noise3]: 85.28%
[25/04/20 16:00:08] [eval.py:   70]: resetting model
[25/04/20 16:01:30] [eval.py:   78]: acc % [shot_noise2]: 89.86%
[25/04/20 16:01:30] [eval.py:   70]: resetting model
[25/04/20 16:02:51] [eval.py:   78]: acc % [shot_noise1]: 91.47%
[25/04/20 16:02:51] [eval.py:   70]: resetting model
[25/04/20 16:04:12] [eval.py:   78]: acc % [impulse_noise5]: 70.90%
[25/04/20 16:04:12] [eval.py:   70]: resetting model
[25/04/20 16:05:33] [eval.py:   78]: acc % [impulse_noise4]: 76.64%
[25/04/20 16:05:33] [eval.py:   70]: resetting model
[25/04/20 16:06:55] [eval.py:   78]: acc % [impulse_noise3]: 83.52%
[25/04/20 16:06:55] [eval.py:   70]: resetting model
[25/04/20 16:08:16] [eval.py:   78]: acc % [impulse_noise2]: 86.59%
[25/04/20 16:08:16] [eval.py:   70]: resetting model
[25/04/20 16:09:37] [eval.py:   78]: acc % [impulse_noise1]: 90.22%
[25/04/20 16:09:37] [eval.py:   70]: resetting model
[25/04/20 16:10:59] [eval.py:   78]: acc % [defocus_blur5]: 88.93%
[25/04/20 16:10:59] [eval.py:   70]: resetting model
[25/04/20 16:12:20] [eval.py:   78]: acc % [defocus_blur4]: 92.07%
[25/04/20 16:12:20] [eval.py:   70]: resetting model
[25/04/20 16:13:41] [eval.py:   78]: acc % [defocus_blur3]: 93.70%
[25/04/20 16:13:41] [eval.py:   70]: resetting model
[25/04/20 16:15:03] [eval.py:   78]: acc % [defocus_blur2]: 93.97%
[25/04/20 16:15:03] [eval.py:   70]: resetting model
[25/04/20 16:16:24] [eval.py:   78]: acc % [defocus_blur1]: 94.13%
[25/04/20 16:16:24] [eval.py:   70]: resetting model
[25/04/20 16:17:45] [eval.py:   78]: acc % [glass_blur5]: 71.29%
[25/04/20 16:17:45] [eval.py:   70]: resetting model
[25/04/20 16:19:07] [eval.py:   78]: acc % [glass_blur4]: 71.50%
[25/04/20 16:19:07] [eval.py:   70]: resetting model
[25/04/20 16:20:28] [eval.py:   78]: acc % [glass_blur3]: 80.60%
[25/04/20 16:20:28] [eval.py:   70]: resetting model
[25/04/20 16:21:49] [eval.py:   78]: acc % [glass_blur2]: 80.26%
[25/04/20 16:21:49] [eval.py:   70]: resetting model
[25/04/20 16:23:11] [eval.py:   78]: acc % [glass_blur1]: 81.25%
[25/04/20 16:23:11] [eval.py:   70]: resetting model
[25/04/20 16:24:32] [eval.py:   78]: acc % [motion_blur5]: 87.82%
[25/04/20 16:24:32] [eval.py:   70]: resetting model
[25/04/20 16:25:53] [eval.py:   78]: acc % [motion_blur4]: 89.74%
[25/04/20 16:25:53] [eval.py:   70]: resetting model
[25/04/20 16:27:15] [eval.py:   78]: acc % [motion_blur3]: 89.46%
[25/04/20 16:27:15] [eval.py:   70]: resetting model
[25/04/20 16:28:36] [eval.py:   78]: acc % [motion_blur2]: 90.99%
[25/04/20 16:28:36] [eval.py:   70]: resetting model
[25/04/20 16:29:57] [eval.py:   78]: acc % [motion_blur1]: 92.50%
[25/04/20 16:29:57] [eval.py:   70]: resetting model
[25/04/20 16:31:18] [eval.py:   78]: acc % [zoom_blur5]: 89.78%
[25/04/20 16:31:18] [eval.py:   70]: resetting model
[25/04/20 16:32:40] [eval.py:   78]: acc % [zoom_blur4]: 91.30%
[25/04/20 16:32:40] [eval.py:   70]: resetting model
[25/04/20 16:34:01] [eval.py:   78]: acc % [zoom_blur3]: 92.29%
[25/04/20 16:34:01] [eval.py:   70]: resetting model
[25/04/20 16:35:22] [eval.py:   78]: acc % [zoom_blur2]: 92.98%
[25/04/20 16:35:22] [eval.py:   70]: resetting model
[25/04/20 16:36:44] [eval.py:   78]: acc % [zoom_blur1]: 93.04%
[25/04/20 16:36:44] [eval.py:   70]: resetting model
[25/04/20 16:38:05] [eval.py:   78]: acc % [snow5]: 85.61%
[25/04/20 16:38:05] [eval.py:   70]: resetting model
[25/04/20 16:39:26] [eval.py:   78]: acc % [snow4]: 85.72%
[25/04/20 16:39:26] [eval.py:   70]: resetting model
[25/04/20 16:40:48] [eval.py:   78]: acc % [snow3]: 88.11%
[25/04/20 16:40:48] [eval.py:   70]: resetting model
[25/04/20 16:42:09] [eval.py:   78]: acc % [snow2]: 88.53%
[25/04/20 16:42:09] [eval.py:   70]: resetting model
[25/04/20 16:43:30] [eval.py:   78]: acc % [snow1]: 91.32%
[25/04/20 16:43:30] [eval.py:   70]: resetting model
[25/04/20 16:44:52] [eval.py:   78]: acc % [frost5]: 85.19%
[25/04/20 16:44:52] [eval.py:   70]: resetting model
[25/04/20 16:46:13] [eval.py:   78]: acc % [frost4]: 87.96%
[25/04/20 16:46:13] [eval.py:   70]: resetting model
[25/04/20 16:47:34] [eval.py:   78]: acc % [frost3]: 87.69%
[25/04/20 16:47:34] [eval.py:   70]: resetting model
[25/04/20 16:48:56] [eval.py:   78]: acc % [frost2]: 90.32%
[25/04/20 16:48:56] [eval.py:   70]: resetting model
[25/04/20 16:50:17] [eval.py:   78]: acc % [frost1]: 92.31%
[25/04/20 16:50:17] [eval.py:   70]: resetting model
[25/04/20 16:51:38] [eval.py:   78]: acc % [fog5]: 87.57%
[25/04/20 16:51:38] [eval.py:   70]: resetting model
[25/04/20 16:53:00] [eval.py:   78]: acc % [fog4]: 92.23%
[25/04/20 16:53:00] [eval.py:   70]: resetting model
[25/04/20 16:54:21] [eval.py:   78]: acc % [fog3]: 93.28%
[25/04/20 16:54:21] [eval.py:   70]: resetting model
[25/04/20 16:55:42] [eval.py:   78]: acc % [fog2]: 93.82%
[25/04/20 16:55:42] [eval.py:   70]: resetting model
[25/04/20 16:57:03] [eval.py:   78]: acc % [fog1]: 94.05%
[25/04/20 16:57:03] [eval.py:   70]: resetting model
[25/04/20 16:58:25] [eval.py:   78]: acc % [brightness5]: 92.32%
[25/04/20 16:58:25] [eval.py:   70]: resetting model
[25/04/20 16:59:46] [eval.py:   78]: acc % [brightness4]: 93.46%
[25/04/20 16:59:46] [eval.py:   70]: resetting model
[25/04/20 17:01:07] [eval.py:   78]: acc % [brightness3]: 93.69%
[25/04/20 17:01:07] [eval.py:   70]: resetting model
[25/04/20 17:02:29] [eval.py:   78]: acc % [brightness2]: 93.92%
[25/04/20 17:02:29] [eval.py:   70]: resetting model
[25/04/20 17:03:50] [eval.py:   78]: acc % [brightness1]: 94.07%
[25/04/20 17:03:50] [eval.py:   70]: resetting model
[25/04/20 17:05:11] [eval.py:   78]: acc % [contrast5]: 89.01%
[25/04/20 17:05:11] [eval.py:   70]: resetting model
[25/04/20 17:06:33] [eval.py:   78]: acc % [contrast4]: 92.04%
[25/04/20 17:06:33] [eval.py:   70]: resetting model
[25/04/20 17:07:54] [eval.py:   78]: acc % [contrast3]: 92.79%
[25/04/20 17:07:54] [eval.py:   70]: resetting model
[25/04/20 17:09:15] [eval.py:   78]: acc % [contrast2]: 93.32%
[25/04/20 17:09:15] [eval.py:   70]: resetting model
[25/04/20 17:10:37] [eval.py:   78]: acc % [contrast1]: 93.93%
[25/04/20 17:10:37] [eval.py:   70]: resetting model
[25/04/20 17:11:58] [eval.py:   78]: acc % [elastic_transform5]: 79.35%
[25/04/20 17:11:58] [eval.py:   70]: resetting model
[25/04/20 17:13:19] [eval.py:   78]: acc % [elastic_transform4]: 85.99%
[25/04/20 17:13:19] [eval.py:   70]: resetting model
[25/04/20 17:14:41] [eval.py:   78]: acc % [elastic_transform3]: 90.85%
[25/04/20 17:14:41] [eval.py:   70]: resetting model
[25/04/20 17:16:02] [eval.py:   78]: acc % [elastic_transform2]: 91.90%
[25/04/20 17:16:02] [eval.py:   70]: resetting model
[25/04/20 17:17:23] [eval.py:   78]: acc % [elastic_transform1]: 91.31%
[25/04/20 17:17:23] [eval.py:   70]: resetting model
[25/04/20 17:18:44] [eval.py:   78]: acc % [pixelate5]: 84.91%
[25/04/20 17:18:44] [eval.py:   70]: resetting model
[25/04/20 17:20:06] [eval.py:   78]: acc % [pixelate4]: 88.80%
[25/04/20 17:20:06] [eval.py:   70]: resetting model
[25/04/20 17:21:27] [eval.py:   78]: acc % [pixelate3]: 91.09%
[25/04/20 17:21:27] [eval.py:   70]: resetting model
[25/04/20 17:22:48] [eval.py:   78]: acc % [pixelate2]: 91.68%
[25/04/20 17:22:48] [eval.py:   70]: resetting model
[25/04/20 17:24:10] [eval.py:   78]: acc % [pixelate1]: 92.71%
[25/04/20 17:24:10] [eval.py:   70]: resetting model
[25/04/20 17:25:31] [eval.py:   78]: acc % [jpeg_compression5]: 79.06%
[25/04/20 17:25:31] [eval.py:   70]: resetting model
[25/04/20 17:26:52] [eval.py:   78]: acc % [jpeg_compression4]: 81.16%
[25/04/20 17:26:52] [eval.py:   70]: resetting model
[25/04/20 17:28:14] [eval.py:   78]: acc % [jpeg_compression3]: 83.45%
[25/04/20 17:28:14] [eval.py:   70]: resetting model
[25/04/20 17:29:35] [eval.py:   78]: acc % [jpeg_compression2]: 84.45%
[25/04/20 17:29:35] [eval.py:   70]: resetting model
[25/04/20 17:30:56] [eval.py:   78]: acc % [jpeg_compression1]: 88.44%
[25/04/20 17:30:56] [eval.py:   84]: 
                          1         2         3         4         5       avg
gaussian_noise     0.780700  0.803900  0.824900  0.861700  0.898200  0.833880
shot_noise         0.798000  0.839900  0.852800  0.898600  0.914700  0.860800
impulse_noise      0.709000  0.766400  0.835200  0.865900  0.902200  0.815740
defocus_blur       0.889300  0.920700  0.937000  0.939700  0.941300  0.925600
glass_blur         0.712900  0.715000  0.806000  0.802600  0.812500  0.769800
motion_blur        0.878200  0.897400  0.894600  0.909900  0.925000  0.901020
zoom_blur          0.897800  0.913000  0.922900  0.929800  0.930400  0.918780
snow               0.856100  0.857200  0.881100  0.885300  0.913200  0.878580
frost              0.851900  0.879600  0.876900  0.903200  0.923100  0.886940
fog                0.875700  0.922300  0.932800  0.938200  0.940500  0.921900
brightness         0.923200  0.934600  0.936900  0.939200  0.940700  0.934920
contrast           0.890100  0.920400  0.927900  0.933200  0.939300  0.922180
elastic_transform  0.793500  0.859900  0.908500  0.919000  0.913100  0.878800
pixelate           0.849100  0.888000  0.910900  0.916800  0.927100  0.898380
jpeg_compression   0.790600  0.811600  0.834500  0.844500  0.884400  0.833120
average            0.833073  0.861993  0.885527  0.899173  0.913713  0.878696
[25/04/20 17:30:56] [eval.py:  125]: resetting model
[25/04/20 17:32:20] [eval.py:  137]: Test set Accuracy: 0.942
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
Files already downloaded and verified
torch.Size([10000, 3, 32, 32]) 10000
