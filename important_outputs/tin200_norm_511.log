[25/04/20 15:49:55] [utils.py:   37]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/04/20 15:49:55] [utils.py:   39]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: tin200
  IMG_SIZE: 64
  NUM_CHANNEL: 3
  NUM_CLASSES: 200
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data/tin200
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 1.0
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: norm_bn_adam-1-0.001-200_250420-154955.txt
LOG_TIME: 250420-154955
MODEL:
  ADAPTATION: norm
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 511
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/tin200/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/gpfs/home5/scur2578/tea/main.py:33: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(os.path.join(cfg.CKPT_DIR ,'{}/{}.pth'.format(cfg.CORRUPTION.DATASET, cfg.MODEL.ARCH)))
[25/04/20 15:49:56] [main.py:   54]: test-time adaptation: NORM
[25/04/20 15:49:56] [setada.py:   29]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=200, bias=True)
)
[25/04/20 15:49:56] [setada.py:   31]: stats for adaptation: ['block1.layer.0.bn1.running_mean', 'block1.layer.0.bn1.running_var', 'block1.layer.0.bn1.num_batches_tracked', 'block1.layer.0.bn2.running_mean', 'block1.layer.0.bn2.running_var', 'block1.layer.0.bn2.num_batches_tracked', 'block1.layer.1.bn1.running_mean', 'block1.layer.1.bn1.running_var', 'block1.layer.1.bn1.num_batches_tracked', 'block1.layer.1.bn2.running_mean', 'block1.layer.1.bn2.running_var', 'block1.layer.1.bn2.num_batches_tracked', 'block1.layer.2.bn1.running_mean', 'block1.layer.2.bn1.running_var', 'block1.layer.2.bn1.num_batches_tracked', 'block1.layer.2.bn2.running_mean', 'block1.layer.2.bn2.running_var', 'block1.layer.2.bn2.num_batches_tracked', 'block1.layer.3.bn1.running_mean', 'block1.layer.3.bn1.running_var', 'block1.layer.3.bn1.num_batches_tracked', 'block1.layer.3.bn2.running_mean', 'block1.layer.3.bn2.running_var', 'block1.layer.3.bn2.num_batches_tracked', 'block2.layer.0.bn1.running_mean', 'block2.layer.0.bn1.running_var', 'block2.layer.0.bn1.num_batches_tracked', 'block2.layer.0.bn2.running_mean', 'block2.layer.0.bn2.running_var', 'block2.layer.0.bn2.num_batches_tracked', 'block2.layer.1.bn1.running_mean', 'block2.layer.1.bn1.running_var', 'block2.layer.1.bn1.num_batches_tracked', 'block2.layer.1.bn2.running_mean', 'block2.layer.1.bn2.running_var', 'block2.layer.1.bn2.num_batches_tracked', 'block2.layer.2.bn1.running_mean', 'block2.layer.2.bn1.running_var', 'block2.layer.2.bn1.num_batches_tracked', 'block2.layer.2.bn2.running_mean', 'block2.layer.2.bn2.running_var', 'block2.layer.2.bn2.num_batches_tracked', 'block2.layer.3.bn1.running_mean', 'block2.layer.3.bn1.running_var', 'block2.layer.3.bn1.num_batches_tracked', 'block2.layer.3.bn2.running_mean', 'block2.layer.3.bn2.running_var', 'block2.layer.3.bn2.num_batches_tracked', 'block3.layer.0.bn1.running_mean', 'block3.layer.0.bn1.running_var', 'block3.layer.0.bn1.num_batches_tracked', 'block3.layer.0.bn2.running_mean', 'block3.layer.0.bn2.running_var', 'block3.layer.0.bn2.num_batches_tracked', 'block3.layer.1.bn1.running_mean', 'block3.layer.1.bn1.running_var', 'block3.layer.1.bn1.num_batches_tracked', 'block3.layer.1.bn2.running_mean', 'block3.layer.1.bn2.running_var', 'block3.layer.1.bn2.num_batches_tracked', 'block3.layer.2.bn1.running_mean', 'block3.layer.2.bn1.running_var', 'block3.layer.2.bn1.num_batches_tracked', 'block3.layer.2.bn2.running_mean', 'block3.layer.2.bn2.running_var', 'block3.layer.2.bn2.num_batches_tracked', 'block3.layer.3.bn1.running_mean', 'block3.layer.3.bn1.running_var', 'block3.layer.3.bn1.num_batches_tracked', 'block3.layer.3.bn2.running_mean', 'block3.layer.3.bn2.running_var', 'block3.layer.3.bn2.num_batches_tracked', 'bn1.running_mean', 'bn1.running_var', 'bn1.num_batches_tracked']
[25/04/20 15:49:56] [eval.py:   70]: resetting model
Building model...
[25/04/20 15:50:01] [eval.py:   78]: acc % [gaussian_noise5]: 6.45%
[25/04/20 15:50:01] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:07] [eval.py:   78]: acc % [gaussian_noise4]: 7.00%
[25/04/20 15:50:07] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:12] [eval.py:   78]: acc % [gaussian_noise3]: 7.62%
[25/04/20 15:50:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:18] [eval.py:   78]: acc % [gaussian_noise2]: 8.39%
[25/04/20 15:50:18] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:24] [eval.py:   78]: acc % [gaussian_noise1]: 9.46%
[25/04/20 15:50:24] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:29] [eval.py:   78]: acc % [shot_noise5]: 6.89%
[25/04/20 15:50:29] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:34] [eval.py:   78]: acc % [shot_noise4]: 7.80%
[25/04/20 15:50:34] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:39] [eval.py:   78]: acc % [shot_noise3]: 8.33%
[25/04/20 15:50:39] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:45] [eval.py:   78]: acc % [shot_noise2]: 8.92%
[25/04/20 15:50:45] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:51] [eval.py:   78]: acc % [shot_noise1]: 9.26%
[25/04/20 15:50:51] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:56] [eval.py:   78]: acc % [impulse_noise5]: 5.64%
[25/04/20 15:50:56] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:02] [eval.py:   78]: acc % [impulse_noise4]: 6.73%
[25/04/20 15:51:02] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:08] [eval.py:   78]: acc % [impulse_noise3]: 7.52%
[25/04/20 15:51:08] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:14] [eval.py:   78]: acc % [impulse_noise2]: 8.44%
[25/04/20 15:51:14] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:20] [eval.py:   78]: acc % [impulse_noise1]: 8.86%
[25/04/20 15:51:20] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:24] [eval.py:   78]: acc % [defocus_blur5]: 7.16%
[25/04/20 15:51:24] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:29] [eval.py:   78]: acc % [defocus_blur4]: 8.00%
[25/04/20 15:51:29] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:34] [eval.py:   78]: acc % [defocus_blur3]: 9.30%
[25/04/20 15:51:34] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:39] [eval.py:   78]: acc % [defocus_blur2]: 9.56%
[25/04/20 15:51:39] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:44] [eval.py:   78]: acc % [defocus_blur1]: 9.72%
[25/04/20 15:51:44] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:48] [eval.py:   78]: acc % [glass_blur5]: 5.48%
[25/04/20 15:51:48] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:52] [eval.py:   78]: acc % [glass_blur4]: 7.20%
[25/04/20 15:51:52] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:56] [eval.py:   78]: acc % [glass_blur3]: 8.51%
[25/04/20 15:51:56] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:00] [eval.py:   78]: acc % [glass_blur2]: 9.19%
[25/04/20 15:52:00] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:04] [eval.py:   78]: acc % [glass_blur1]: 9.53%
[25/04/20 15:52:04] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:07] [eval.py:   78]: acc % [motion_blur5]: 8.42%
[25/04/20 15:52:07] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:12] [eval.py:   78]: acc % [motion_blur4]: 8.64%
[25/04/20 15:52:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:16] [eval.py:   78]: acc % [motion_blur3]: 8.85%
[25/04/20 15:52:16] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:20] [eval.py:   78]: acc % [motion_blur2]: 9.45%
[25/04/20 15:52:20] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:24] [eval.py:   78]: acc % [motion_blur1]: 9.79%
[25/04/20 15:52:24] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:29] [eval.py:   78]: acc % [zoom_blur5]: 8.72%
[25/04/20 15:52:29] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:34] [eval.py:   78]: acc % [zoom_blur4]: 9.17%
[25/04/20 15:52:34] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:38] [eval.py:   78]: acc % [zoom_blur3]: 9.42%
[25/04/20 15:52:38] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:42] [eval.py:   78]: acc % [zoom_blur2]: 9.60%
[25/04/20 15:52:42] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:47] [eval.py:   78]: acc % [zoom_blur1]: 9.84%
[25/04/20 15:52:47] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:52] [eval.py:   78]: acc % [snow5]: 7.19%
[25/04/20 15:52:52] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:56] [eval.py:   78]: acc % [snow4]: 6.64%
[25/04/20 15:52:56] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:01] [eval.py:   78]: acc % [snow3]: 7.89%
[25/04/20 15:53:01] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:07] [eval.py:   78]: acc % [snow2]: 8.67%
[25/04/20 15:53:07] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:12] [eval.py:   78]: acc % [snow1]: 9.25%
[25/04/20 15:53:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:18] [eval.py:   78]: acc % [frost5]: 7.48%
[25/04/20 15:53:18] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:24] [eval.py:   78]: acc % [frost4]: 7.81%
[25/04/20 15:53:24] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:31] [eval.py:   78]: acc % [frost3]: 8.07%
[25/04/20 15:53:31] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:37] [eval.py:   78]: acc % [frost2]: 8.55%
[25/04/20 15:53:37] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:43] [eval.py:   78]: acc % [frost1]: 9.13%
[25/04/20 15:53:43] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:47] [eval.py:   78]: acc % [fog5]: 7.18%
[25/04/20 15:53:47] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:51] [eval.py:   78]: acc % [fog4]: 8.08%
[25/04/20 15:53:51] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:55] [eval.py:   78]: acc % [fog3]: 8.93%
[25/04/20 15:53:55] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:59] [eval.py:   78]: acc % [fog2]: 9.57%
[25/04/20 15:53:59] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:03] [eval.py:   78]: acc % [fog1]: 9.82%
[25/04/20 15:54:03] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:09] [eval.py:   78]: acc % [brightness5]: 8.70%
[25/04/20 15:54:09] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:15] [eval.py:   78]: acc % [brightness4]: 9.29%
[25/04/20 15:54:15] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:22] [eval.py:   78]: acc % [brightness3]: 9.36%
[25/04/20 15:54:22] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:29] [eval.py:   78]: acc % [brightness2]: 9.92%
[25/04/20 15:54:29] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:34] [eval.py:   78]: acc % [brightness1]: 9.89%
[25/04/20 15:54:34] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:42] [eval.py:   78]: acc % [contrast5]: 2.89%
[25/04/20 15:54:42] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:48] [eval.py:   78]: acc % [contrast4]: 5.00%
[25/04/20 15:54:48] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:54] [eval.py:   78]: acc % [contrast3]: 7.28%
[25/04/20 15:54:54] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:00] [eval.py:   78]: acc % [contrast2]: 8.51%
[25/04/20 15:55:00] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:07] [eval.py:   78]: acc % [contrast1]: 8.95%
[25/04/20 15:55:07] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:12] [eval.py:   78]: acc % [elastic_transform5]: 8.24%
[25/04/20 15:55:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:18] [eval.py:   78]: acc % [elastic_transform4]: 9.33%
[25/04/20 15:55:18] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:25] [eval.py:   78]: acc % [elastic_transform3]: 9.42%
[25/04/20 15:55:25] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:31] [eval.py:   78]: acc % [elastic_transform2]: 9.35%
[25/04/20 15:55:31] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:37] [eval.py:   78]: acc % [elastic_transform1]: 9.28%
[25/04/20 15:55:37] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:41] [eval.py:   78]: acc % [pixelate5]: 9.73%
[25/04/20 15:55:41] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:45] [eval.py:   78]: acc % [pixelate4]: 9.61%
[25/04/20 15:55:45] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:49] [eval.py:   78]: acc % [pixelate3]: 9.77%
[25/04/20 15:55:49] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:53] [eval.py:   78]: acc % [pixelate2]: 9.76%
[25/04/20 15:55:53] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:57] [eval.py:   78]: acc % [pixelate1]: 9.89%
[25/04/20 15:55:57] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:03] [eval.py:   78]: acc % [jpeg_compression5]: 8.92%
[25/04/20 15:56:03] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:09] [eval.py:   78]: acc % [jpeg_compression4]: 9.41%
[25/04/20 15:56:09] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:15] [eval.py:   78]: acc % [jpeg_compression3]: 9.74%
[25/04/20 15:56:15] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:22] [eval.py:   78]: acc % [jpeg_compression2]: 9.59%
[25/04/20 15:56:22] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:30] [eval.py:   78]: acc % [jpeg_compression1]: 9.55%
[25/04/20 15:56:30] [eval.py:   84]: 
                          1         2         3         4         5       avg
gaussian_noise     0.064500  0.070000  0.076200  0.083900  0.094600  0.077840
shot_noise         0.068900  0.078000  0.083300  0.089200  0.092600  0.082400
impulse_noise      0.056400  0.067300  0.075200  0.084400  0.088600  0.074380
defocus_blur       0.071600  0.080000  0.093000  0.095600  0.097200  0.087480
glass_blur         0.054800  0.072000  0.085100  0.091900  0.095300  0.079820
motion_blur        0.084200  0.086400  0.088500  0.094500  0.097900  0.090300
zoom_blur          0.087200  0.091700  0.094200  0.096000  0.098400  0.093500
snow               0.071900  0.066400  0.078900  0.086700  0.092500  0.079280
frost              0.074800  0.078100  0.080700  0.085500  0.091300  0.082080
fog                0.071800  0.080800  0.089300  0.095700  0.098200  0.087160
brightness         0.087000  0.092900  0.093600  0.099200  0.098900  0.094320
contrast           0.028900  0.050000  0.072800  0.085100  0.089500  0.065260
elastic_transform  0.082400  0.093300  0.094200  0.093500  0.092800  0.091240
pixelate           0.097300  0.096100  0.097700  0.097600  0.098900  0.097520
jpeg_compression   0.089200  0.094100  0.097400  0.095900  0.095500  0.094420
average            0.072727  0.079807  0.086673  0.091647  0.094813  0.085133
[25/04/20 15:56:30] [eval.py:  125]: resetting model
[25/04/20 15:56:30] [data.py:  150]: using tin200..
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 1/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 2/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 3/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 4/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 5/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 6/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 7/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 8/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 9/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 10/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 11/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 12/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 13/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 14/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 15/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 16/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 17/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 18/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 19/50
[25/04/20 15:56:31] [eval.py:   47]: Test Batch Process: 20/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 21/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 22/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 23/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 24/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 25/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 26/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 27/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 28/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 29/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 30/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 31/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 32/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 33/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 34/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 35/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 36/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 37/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 38/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 39/50
[25/04/20 15:56:32] [eval.py:   47]: Test Batch Process: 40/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 41/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 42/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 43/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 44/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 45/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 46/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 47/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 48/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 49/50
[25/04/20 15:56:33] [eval.py:   47]: Test Batch Process: 50/50
[25/04/20 15:56:33] [eval.py:  144]: Test set Accuracy: 0.68
