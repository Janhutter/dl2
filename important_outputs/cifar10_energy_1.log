[25/04/20 15:49:14] [utils.py:   37]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/04/20 15:49:14] [utils.py:   39]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 10
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data/cifar10
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 0.1
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: energy_bn_adam-1-0.001-200_uncond-20-0.1-0.01-10000-0.05_250420-154914.txt
LOG_TIME: 250420-154914
MODEL:
  ADAPTATION: energy
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 1
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar10/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/home/scur2578/.local/lib/python3.9/site-packages/robustbench/utils.py:165: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
[25/04/20 15:49:15] [main.py:   66]: test-time adaptation: ENERGY
[25/04/20 15:49:15] [param.py:   18]: adapting weights of batch-normalization layer
[25/04/20 15:49:15] [setada.py:  138]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/04/20 15:49:15] [setada.py:  139]: params for adaptation: ['block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'bn1.weight', 'bn1.bias']
[25/04/20 15:49:15] [setada.py:  140]: optimizer for adaptation: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0.0
)
[25/04/20 15:49:15] [eval.py:   70]: resetting model
[25/04/20 15:50:38] [eval.py:   78]: acc % [gaussian_noise5]: 78.06%
[25/04/20 15:50:38] [eval.py:   70]: resetting model
[25/04/20 15:51:59] [eval.py:   78]: acc % [gaussian_noise4]: 80.44%
[25/04/20 15:51:59] [eval.py:   70]: resetting model
[25/04/20 15:53:20] [eval.py:   78]: acc % [gaussian_noise3]: 82.51%
[25/04/20 15:53:20] [eval.py:   70]: resetting model
[25/04/20 15:54:41] [eval.py:   78]: acc % [gaussian_noise2]: 86.19%
[25/04/20 15:54:41] [eval.py:   70]: resetting model
[25/04/20 15:56:03] [eval.py:   78]: acc % [gaussian_noise1]: 89.81%
[25/04/20 15:56:03] [eval.py:   70]: resetting model
[25/04/20 15:57:24] [eval.py:   78]: acc % [shot_noise5]: 79.84%
[25/04/20 15:57:24] [eval.py:   70]: resetting model
[25/04/20 15:58:45] [eval.py:   78]: acc % [shot_noise4]: 83.99%
[25/04/20 15:58:45] [eval.py:   70]: resetting model
[25/04/20 16:00:06] [eval.py:   78]: acc % [shot_noise3]: 85.16%
[25/04/20 16:00:06] [eval.py:   70]: resetting model
[25/04/20 16:01:28] [eval.py:   78]: acc % [shot_noise2]: 89.81%
[25/04/20 16:01:28] [eval.py:   70]: resetting model
[25/04/20 16:02:49] [eval.py:   78]: acc % [shot_noise1]: 91.48%
[25/04/20 16:02:49] [eval.py:   70]: resetting model
[25/04/20 16:04:10] [eval.py:   78]: acc % [impulse_noise5]: 70.91%
[25/04/20 16:04:10] [eval.py:   70]: resetting model
[25/04/20 16:05:32] [eval.py:   78]: acc % [impulse_noise4]: 76.65%
[25/04/20 16:05:32] [eval.py:   70]: resetting model
[25/04/20 16:06:53] [eval.py:   78]: acc % [impulse_noise3]: 83.50%
[25/04/20 16:06:53] [eval.py:   70]: resetting model
[25/04/20 16:08:14] [eval.py:   78]: acc % [impulse_noise2]: 86.58%
[25/04/20 16:08:14] [eval.py:   70]: resetting model
[25/04/20 16:09:35] [eval.py:   78]: acc % [impulse_noise1]: 90.26%
[25/04/20 16:09:35] [eval.py:   70]: resetting model
[25/04/20 16:10:57] [eval.py:   78]: acc % [defocus_blur5]: 88.94%
[25/04/20 16:10:57] [eval.py:   70]: resetting model
[25/04/20 16:12:18] [eval.py:   78]: acc % [defocus_blur4]: 92.06%
[25/04/20 16:12:18] [eval.py:   70]: resetting model
[25/04/20 16:13:39] [eval.py:   78]: acc % [defocus_blur3]: 93.69%
[25/04/20 16:13:39] [eval.py:   70]: resetting model
[25/04/20 16:15:00] [eval.py:   78]: acc % [defocus_blur2]: 93.93%
[25/04/20 16:15:00] [eval.py:   70]: resetting model
[25/04/20 16:16:22] [eval.py:   78]: acc % [defocus_blur1]: 94.10%
[25/04/20 16:16:22] [eval.py:   70]: resetting model
[25/04/20 16:17:43] [eval.py:   78]: acc % [glass_blur5]: 71.22%
[25/04/20 16:17:43] [eval.py:   70]: resetting model
[25/04/20 16:19:04] [eval.py:   78]: acc % [glass_blur4]: 71.56%
[25/04/20 16:19:04] [eval.py:   70]: resetting model
[25/04/20 16:20:26] [eval.py:   78]: acc % [glass_blur3]: 80.62%
[25/04/20 16:20:26] [eval.py:   70]: resetting model
[25/04/20 16:21:47] [eval.py:   78]: acc % [glass_blur2]: 80.37%
[25/04/20 16:21:47] [eval.py:   70]: resetting model
[25/04/20 16:23:08] [eval.py:   78]: acc % [glass_blur1]: 81.13%
[25/04/20 16:23:08] [eval.py:   70]: resetting model
[25/04/20 16:24:29] [eval.py:   78]: acc % [motion_blur5]: 87.84%
[25/04/20 16:24:29] [eval.py:   70]: resetting model
[25/04/20 16:25:51] [eval.py:   78]: acc % [motion_blur4]: 89.77%
[25/04/20 16:25:51] [eval.py:   70]: resetting model
[25/04/20 16:27:12] [eval.py:   78]: acc % [motion_blur3]: 89.42%
[25/04/20 16:27:12] [eval.py:   70]: resetting model
[25/04/20 16:28:33] [eval.py:   78]: acc % [motion_blur2]: 90.97%
[25/04/20 16:28:33] [eval.py:   70]: resetting model
[25/04/20 16:29:54] [eval.py:   78]: acc % [motion_blur1]: 92.50%
[25/04/20 16:29:54] [eval.py:   70]: resetting model
[25/04/20 16:31:16] [eval.py:   78]: acc % [zoom_blur5]: 89.83%
[25/04/20 16:31:16] [eval.py:   70]: resetting model
[25/04/20 16:32:37] [eval.py:   78]: acc % [zoom_blur4]: 91.31%
[25/04/20 16:32:37] [eval.py:   70]: resetting model
[25/04/20 16:33:58] [eval.py:   78]: acc % [zoom_blur3]: 92.30%
[25/04/20 16:33:58] [eval.py:   70]: resetting model
[25/04/20 16:35:19] [eval.py:   78]: acc % [zoom_blur2]: 93.06%
[25/04/20 16:35:19] [eval.py:   70]: resetting model
[25/04/20 16:36:41] [eval.py:   78]: acc % [zoom_blur1]: 93.08%
[25/04/20 16:36:41] [eval.py:   70]: resetting model
[25/04/20 16:38:02] [eval.py:   78]: acc % [snow5]: 85.59%
[25/04/20 16:38:02] [eval.py:   70]: resetting model
[25/04/20 16:39:23] [eval.py:   78]: acc % [snow4]: 85.77%
[25/04/20 16:39:23] [eval.py:   70]: resetting model
[25/04/20 16:40:45] [eval.py:   78]: acc % [snow3]: 88.08%
[25/04/20 16:40:45] [eval.py:   70]: resetting model
[25/04/20 16:42:06] [eval.py:   78]: acc % [snow2]: 88.61%
[25/04/20 16:42:06] [eval.py:   70]: resetting model
[25/04/20 16:43:27] [eval.py:   78]: acc % [snow1]: 91.29%
[25/04/20 16:43:27] [eval.py:   70]: resetting model
[25/04/20 16:44:48] [eval.py:   78]: acc % [frost5]: 85.15%
[25/04/20 16:44:48] [eval.py:   70]: resetting model
[25/04/20 16:46:10] [eval.py:   78]: acc % [frost4]: 87.95%
[25/04/20 16:46:10] [eval.py:   70]: resetting model
[25/04/20 16:47:31] [eval.py:   78]: acc % [frost3]: 87.65%
[25/04/20 16:47:31] [eval.py:   70]: resetting model
[25/04/20 16:48:52] [eval.py:   78]: acc % [frost2]: 90.32%
[25/04/20 16:48:52] [eval.py:   70]: resetting model
[25/04/20 16:50:13] [eval.py:   78]: acc % [frost1]: 92.30%
[25/04/20 16:50:13] [eval.py:   70]: resetting model
[25/04/20 16:51:35] [eval.py:   78]: acc % [fog5]: 87.61%
[25/04/20 16:51:35] [eval.py:   70]: resetting model
[25/04/20 16:52:56] [eval.py:   78]: acc % [fog4]: 92.10%
[25/04/20 16:52:56] [eval.py:   70]: resetting model
[25/04/20 16:54:17] [eval.py:   78]: acc % [fog3]: 93.29%
[25/04/20 16:54:17] [eval.py:   70]: resetting model
[25/04/20 16:55:38] [eval.py:   78]: acc % [fog2]: 93.82%
[25/04/20 16:55:38] [eval.py:   70]: resetting model
[25/04/20 16:57:00] [eval.py:   78]: acc % [fog1]: 94.04%
[25/04/20 16:57:00] [eval.py:   70]: resetting model
[25/04/20 16:58:21] [eval.py:   78]: acc % [brightness5]: 92.31%
[25/04/20 16:58:21] [eval.py:   70]: resetting model
[25/04/20 16:59:42] [eval.py:   78]: acc % [brightness4]: 93.51%
[25/04/20 16:59:42] [eval.py:   70]: resetting model
[25/04/20 17:01:04] [eval.py:   78]: acc % [brightness3]: 93.66%
[25/04/20 17:01:04] [eval.py:   70]: resetting model
[25/04/20 17:02:25] [eval.py:   78]: acc % [brightness2]: 93.97%
[25/04/20 17:02:25] [eval.py:   70]: resetting model
[25/04/20 17:03:46] [eval.py:   78]: acc % [brightness1]: 94.07%
[25/04/20 17:03:46] [eval.py:   70]: resetting model
[25/04/20 17:05:07] [eval.py:   78]: acc % [contrast5]: 88.97%
[25/04/20 17:05:07] [eval.py:   70]: resetting model
[25/04/20 17:06:29] [eval.py:   78]: acc % [contrast4]: 92.06%
[25/04/20 17:06:29] [eval.py:   70]: resetting model
[25/04/20 17:07:50] [eval.py:   78]: acc % [contrast3]: 92.84%
[25/04/20 17:07:50] [eval.py:   70]: resetting model
[25/04/20 17:09:11] [eval.py:   78]: acc % [contrast2]: 93.35%
[25/04/20 17:09:11] [eval.py:   70]: resetting model
[25/04/20 17:10:32] [eval.py:   78]: acc % [contrast1]: 93.95%
[25/04/20 17:10:32] [eval.py:   70]: resetting model
[25/04/20 17:11:54] [eval.py:   78]: acc % [elastic_transform5]: 79.34%
[25/04/20 17:11:54] [eval.py:   70]: resetting model
[25/04/20 17:13:15] [eval.py:   78]: acc % [elastic_transform4]: 86.00%
[25/04/20 17:13:15] [eval.py:   70]: resetting model
[25/04/20 17:14:36] [eval.py:   78]: acc % [elastic_transform3]: 90.85%
[25/04/20 17:14:36] [eval.py:   70]: resetting model
[25/04/20 17:15:57] [eval.py:   78]: acc % [elastic_transform2]: 91.93%
[25/04/20 17:15:57] [eval.py:   70]: resetting model
[25/04/20 17:17:19] [eval.py:   78]: acc % [elastic_transform1]: 91.38%
[25/04/20 17:17:19] [eval.py:   70]: resetting model
[25/04/20 17:18:40] [eval.py:   78]: acc % [pixelate5]: 84.91%
[25/04/20 17:18:40] [eval.py:   70]: resetting model
[25/04/20 17:20:01] [eval.py:   78]: acc % [pixelate4]: 88.82%
[25/04/20 17:20:01] [eval.py:   70]: resetting model
[25/04/20 17:21:23] [eval.py:   78]: acc % [pixelate3]: 91.02%
[25/04/20 17:21:23] [eval.py:   70]: resetting model
[25/04/20 17:22:44] [eval.py:   78]: acc % [pixelate2]: 91.76%
[25/04/20 17:22:44] [eval.py:   70]: resetting model
[25/04/20 17:24:05] [eval.py:   78]: acc % [pixelate1]: 92.77%
[25/04/20 17:24:05] [eval.py:   70]: resetting model
[25/04/20 17:25:26] [eval.py:   78]: acc % [jpeg_compression5]: 79.10%
[25/04/20 17:25:26] [eval.py:   70]: resetting model
[25/04/20 17:26:48] [eval.py:   78]: acc % [jpeg_compression4]: 81.17%
[25/04/20 17:26:48] [eval.py:   70]: resetting model
[25/04/20 17:28:09] [eval.py:   78]: acc % [jpeg_compression3]: 83.43%
[25/04/20 17:28:09] [eval.py:   70]: resetting model
[25/04/20 17:29:30] [eval.py:   78]: acc % [jpeg_compression2]: 84.41%
[25/04/20 17:29:30] [eval.py:   70]: resetting model
[25/04/20 17:30:51] [eval.py:   78]: acc % [jpeg_compression1]: 88.47%
[25/04/20 17:30:51] [eval.py:   84]: 
                         1         2         3         4         5       avg
gaussian_noise     0.78060  0.804400  0.825100  0.861900  0.898100  0.834020
shot_noise         0.79840  0.839900  0.851600  0.898100  0.914800  0.860560
impulse_noise      0.70910  0.766500  0.835000  0.865800  0.902600  0.815800
defocus_blur       0.88940  0.920600  0.936900  0.939300  0.941000  0.925440
glass_blur         0.71220  0.715600  0.806200  0.803700  0.811300  0.769800
motion_blur        0.87840  0.897700  0.894200  0.909700  0.925000  0.901000
zoom_blur          0.89830  0.913100  0.923000  0.930600  0.930800  0.919160
snow               0.85590  0.857700  0.880800  0.886100  0.912900  0.878680
frost              0.85150  0.879500  0.876500  0.903200  0.923000  0.886740
fog                0.87610  0.921000  0.932900  0.938200  0.940400  0.921720
brightness         0.92310  0.935100  0.936600  0.939700  0.940700  0.935040
contrast           0.88970  0.920600  0.928400  0.933500  0.939500  0.922340
elastic_transform  0.79340  0.860000  0.908500  0.919300  0.913800  0.879000
pixelate           0.84910  0.888200  0.910200  0.917600  0.927700  0.898560
jpeg_compression   0.79100  0.811700  0.834300  0.844100  0.884700  0.833160
average            0.83308  0.862107  0.885347  0.899387  0.913753  0.878735
[25/04/20 17:30:51] [eval.py:  125]: resetting model
[25/04/20 17:32:15] [eval.py:  137]: Test set Accuracy: 0.9415
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
Files already downloaded and verified
torch.Size([10000, 3, 32, 32]) 10000
