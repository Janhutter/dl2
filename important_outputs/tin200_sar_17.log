[25/04/20 15:50:11] [utils.py:   37]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/04/20 15:50:11] [utils.py:   39]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: tin200
  IMG_SIZE: 64
  NUM_CHANNEL: 3
  NUM_CLASSES: 200
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: ./data/tin200
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 1.0
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: sar_bn_adam-1-0.01-200_250420-155008.txt
LOG_TIME: 250420-155008
MODEL:
  ADAPTATION: sar
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.01
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 17
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/tin200/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/gpfs/home5/scur2578/tea/main.py:33: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(os.path.join(cfg.CKPT_DIR ,'{}/{}.pth'.format(cfg.CORRUPTION.DATASET, cfg.MODEL.ARCH)))
[25/04/20 15:50:12] [main.py:   69]: test-time adaptation: SAR
[25/04/20 15:50:12] [sar.py:  151]: adapting weights for SAR
[25/04/20 15:50:12] [setada.py:  155]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=200, bias=True)
)
[25/04/20 15:50:12] [setada.py:  156]: params for adaptation: ['block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'bn1.weight', 'bn1.bias']
[25/04/20 15:50:12] [setada.py:  157]: optimizer for adaptation: SAM (
Parameter Group 0
    adaptive: False
    dampening: 0
    differentiable: False
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    momentum: 0.9
    nesterov: False
    rho: 0.05
    weight_decay: 0
)
[25/04/20 15:50:12] [eval.py:   70]: resetting model
Building model...
[25/04/20 15:50:23] [eval.py:   78]: acc % [gaussian_noise5]: 6.10%
[25/04/20 15:50:23] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:32] [eval.py:   78]: acc % [gaussian_noise4]: 6.27%
[25/04/20 15:50:32] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:42] [eval.py:   78]: acc % [gaussian_noise3]: 6.90%
[25/04/20 15:50:42] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:50:51] [eval.py:   78]: acc % [gaussian_noise2]: 7.76%
[25/04/20 15:50:51] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:01] [eval.py:   78]: acc % [gaussian_noise1]: 8.54%
[25/04/20 15:51:01] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:10] [eval.py:   78]: acc % [shot_noise5]: 6.17%
[25/04/20 15:51:10] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:20] [eval.py:   78]: acc % [shot_noise4]: 7.25%
[25/04/20 15:51:20] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:29] [eval.py:   78]: acc % [shot_noise3]: 7.87%
[25/04/20 15:51:29] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:39] [eval.py:   78]: acc % [shot_noise2]: 8.15%
[25/04/20 15:51:39] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:48] [eval.py:   78]: acc % [shot_noise1]: 8.56%
[25/04/20 15:51:48] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:51:58] [eval.py:   78]: acc % [impulse_noise5]: 5.37%
[25/04/20 15:51:58] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:08] [eval.py:   78]: acc % [impulse_noise4]: 6.06%
[25/04/20 15:52:08] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:19] [eval.py:   78]: acc % [impulse_noise3]: 6.99%
[25/04/20 15:52:19] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:31] [eval.py:   78]: acc % [impulse_noise2]: 7.41%
[25/04/20 15:52:31] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:42] [eval.py:   78]: acc % [impulse_noise1]: 8.19%
[25/04/20 15:52:42] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:52:54] [eval.py:   78]: acc % [defocus_blur5]: 6.82%
[25/04/20 15:52:54] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:05] [eval.py:   78]: acc % [defocus_blur4]: 7.20%
[25/04/20 15:53:05] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:16] [eval.py:   78]: acc % [defocus_blur3]: 8.65%
[25/04/20 15:53:16] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:27] [eval.py:   78]: acc % [defocus_blur2]: 8.83%
[25/04/20 15:53:27] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:39] [eval.py:   78]: acc % [defocus_blur1]: 8.97%
[25/04/20 15:53:39] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:53:50] [eval.py:   78]: acc % [glass_blur5]: 4.89%
[25/04/20 15:53:50] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:01] [eval.py:   78]: acc % [glass_blur4]: 6.46%
[25/04/20 15:54:01] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:12] [eval.py:   78]: acc % [glass_blur3]: 7.67%
[25/04/20 15:54:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:23] [eval.py:   78]: acc % [glass_blur2]: 8.42%
[25/04/20 15:54:23] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:34] [eval.py:   78]: acc % [glass_blur1]: 8.66%
[25/04/20 15:54:34] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:46] [eval.py:   78]: acc % [motion_blur5]: 7.83%
[25/04/20 15:54:46] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:54:57] [eval.py:   78]: acc % [motion_blur4]: 7.98%
[25/04/20 15:54:57] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:07] [eval.py:   78]: acc % [motion_blur3]: 8.23%
[25/04/20 15:55:07] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:18] [eval.py:   78]: acc % [motion_blur2]: 8.74%
[25/04/20 15:55:18] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:30] [eval.py:   78]: acc % [motion_blur1]: 9.07%
[25/04/20 15:55:30] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:41] [eval.py:   78]: acc % [zoom_blur5]: 7.97%
[25/04/20 15:55:41] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:55:52] [eval.py:   78]: acc % [zoom_blur4]: 8.27%
[25/04/20 15:55:52] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:04] [eval.py:   78]: acc % [zoom_blur3]: 8.62%
[25/04/20 15:56:04] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:14] [eval.py:   78]: acc % [zoom_blur2]: 8.93%
[25/04/20 15:56:14] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:26] [eval.py:   78]: acc % [zoom_blur1]: 8.94%
[25/04/20 15:56:26] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:37] [eval.py:   78]: acc % [snow5]: 6.47%
[25/04/20 15:56:37] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:47] [eval.py:   78]: acc % [snow4]: 5.83%
[25/04/20 15:56:47] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:56:58] [eval.py:   78]: acc % [snow3]: 6.82%
[25/04/20 15:56:58] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:57:09] [eval.py:   78]: acc % [snow2]: 7.71%
[25/04/20 15:57:09] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:57:19] [eval.py:   78]: acc % [snow1]: 8.25%
[25/04/20 15:57:20] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:57:30] [eval.py:   78]: acc % [frost5]: 6.47%
[25/04/20 15:57:30] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:57:40] [eval.py:   78]: acc % [frost4]: 6.70%
[25/04/20 15:57:40] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:57:51] [eval.py:   78]: acc % [frost3]: 7.10%
[25/04/20 15:57:51] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:58:01] [eval.py:   78]: acc % [frost2]: 7.41%
[25/04/20 15:58:01] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:58:11] [eval.py:   78]: acc % [frost1]: 7.87%
[25/04/20 15:58:11] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:58:22] [eval.py:   78]: acc % [fog5]: 6.66%
[25/04/20 15:58:22] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:58:32] [eval.py:   78]: acc % [fog4]: 7.32%
[25/04/20 15:58:32] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:58:42] [eval.py:   78]: acc % [fog3]: 8.07%
[25/04/20 15:58:42] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:58:52] [eval.py:   78]: acc % [fog2]: 8.67%
[25/04/20 15:58:52] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:59:02] [eval.py:   78]: acc % [fog1]: 8.99%
[25/04/20 15:59:02] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:59:12] [eval.py:   78]: acc % [brightness5]: 7.82%
[25/04/20 15:59:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:59:22] [eval.py:   78]: acc % [brightness4]: 8.49%
[25/04/20 15:59:22] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:59:32] [eval.py:   78]: acc % [brightness3]: 8.63%
[25/04/20 15:59:32] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:59:43] [eval.py:   78]: acc % [brightness2]: 8.93%
[25/04/20 15:59:43] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 15:59:54] [eval.py:   78]: acc % [brightness1]: 8.94%
[25/04/20 15:59:54] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:00:04] [eval.py:   78]: acc % [contrast5]: 2.31%
[25/04/20 16:00:04] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:00:15] [eval.py:   78]: acc % [contrast4]: 3.71%
[25/04/20 16:00:15] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:00:26] [eval.py:   78]: acc % [contrast3]: 5.64%
[25/04/20 16:00:26] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:00:37] [eval.py:   78]: acc % [contrast2]: 6.44%
[25/04/20 16:00:37] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:00:48] [eval.py:   78]: acc % [contrast1]: 7.34%
[25/04/20 16:00:48] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:00:59] [eval.py:   78]: acc % [elastic_transform5]: 7.46%
[25/04/20 16:00:59] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:01:10] [eval.py:   78]: acc % [elastic_transform4]: 8.38%
[25/04/20 16:01:10] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:01:22] [eval.py:   78]: acc % [elastic_transform3]: 8.52%
[25/04/20 16:01:22] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:01:33] [eval.py:   78]: acc % [elastic_transform2]: 8.55%
[25/04/20 16:01:33] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:01:44] [eval.py:   78]: acc % [elastic_transform1]: 8.48%
[25/04/20 16:01:44] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:01:55] [eval.py:   78]: acc % [pixelate5]: 8.94%
[25/04/20 16:01:55] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:02:05] [eval.py:   78]: acc % [pixelate4]: 8.86%
[25/04/20 16:02:05] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:02:15] [eval.py:   78]: acc % [pixelate3]: 9.00%
[25/04/20 16:02:15] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:02:25] [eval.py:   78]: acc % [pixelate2]: 8.87%
[25/04/20 16:02:25] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:02:35] [eval.py:   78]: acc % [pixelate1]: 9.26%
[25/04/20 16:02:35] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:02:44] [eval.py:   78]: acc % [jpeg_compression5]: 8.20%
[25/04/20 16:02:44] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:02:53] [eval.py:   78]: acc % [jpeg_compression4]: 8.34%
[25/04/20 16:02:53] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:03:03] [eval.py:   78]: acc % [jpeg_compression3]: 8.86%
[25/04/20 16:03:03] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:03:12] [eval.py:   78]: acc % [jpeg_compression2]: 8.66%
[25/04/20 16:03:12] [eval.py:   70]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:03:22] [eval.py:   78]: acc % [jpeg_compression1]: 8.67%
[25/04/20 16:03:22] [eval.py:   84]: 
                         1         2        3        4        5       avg
gaussian_noise     0.06100  0.062700  0.06900  0.07760  0.08540  0.071140
shot_noise         0.06170  0.072500  0.07870  0.08150  0.08560  0.076000
impulse_noise      0.05370  0.060600  0.06990  0.07410  0.08190  0.068040
defocus_blur       0.06820  0.072000  0.08650  0.08830  0.08970  0.080940
glass_blur         0.04890  0.064600  0.07670  0.08420  0.08660  0.072200
motion_blur        0.07830  0.079800  0.08230  0.08740  0.09070  0.083700
zoom_blur          0.07970  0.082700  0.08620  0.08930  0.08940  0.085460
snow               0.06470  0.058300  0.06820  0.07710  0.08250  0.070160
frost              0.06470  0.067000  0.07100  0.07410  0.07870  0.071100
fog                0.06660  0.073200  0.08070  0.08670  0.08990  0.079420
brightness         0.07820  0.084900  0.08630  0.08930  0.08940  0.085620
contrast           0.02310  0.037100  0.05640  0.06440  0.07340  0.050880
elastic_transform  0.07460  0.083800  0.08520  0.08550  0.08480  0.082780
pixelate           0.08940  0.088600  0.09000  0.08870  0.09260  0.089860
jpeg_compression   0.08200  0.083400  0.08860  0.08660  0.08670  0.085460
average            0.06632  0.071413  0.07838  0.08232  0.08582  0.076851
[25/04/20 16:03:22] [eval.py:  125]: resetting model
[25/04/20 16:03:22] [data.py:  150]: using tin200..
torch.Size([10000, 3, 32, 32]) 10000
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 1/50
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 2/50
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 3/50
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 4/50
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 5/50
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 6/50
[25/04/20 16:03:23] [eval.py:   47]: Test Batch Process: 7/50
[25/04/20 16:03:24] [eval.py:   47]: Test Batch Process: 8/50
[25/04/20 16:03:24] [eval.py:   47]: Test Batch Process: 9/50
[25/04/20 16:03:24] [eval.py:   47]: Test Batch Process: 10/50
[25/04/20 16:03:24] [eval.py:   47]: Test Batch Process: 11/50
[25/04/20 16:03:24] [eval.py:   47]: Test Batch Process: 12/50
[25/04/20 16:03:24] [eval.py:   47]: Test Batch Process: 13/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 14/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 15/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 16/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 17/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 18/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 19/50
[25/04/20 16:03:25] [eval.py:   47]: Test Batch Process: 20/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 21/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 22/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 23/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 24/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 25/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 26/50
[25/04/20 16:03:26] [eval.py:   47]: Test Batch Process: 27/50
[25/04/20 16:03:27] [eval.py:   47]: Test Batch Process: 28/50
[25/04/20 16:03:27] [eval.py:   47]: Test Batch Process: 29/50
[25/04/20 16:03:27] [eval.py:   47]: Test Batch Process: 30/50
[25/04/20 16:03:27] [eval.py:   47]: Test Batch Process: 31/50
[25/04/20 16:03:27] [eval.py:   47]: Test Batch Process: 32/50
[25/04/20 16:03:27] [eval.py:   47]: Test Batch Process: 33/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 34/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 35/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 36/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 37/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 38/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 39/50
[25/04/20 16:03:28] [eval.py:   47]: Test Batch Process: 40/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 41/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 42/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 43/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 44/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 45/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 46/50
[25/04/20 16:03:29] [eval.py:   47]: Test Batch Process: 47/50
[25/04/20 16:03:30] [eval.py:   47]: Test Batch Process: 48/50
[25/04/20 16:03:30] [eval.py:   47]: Test Batch Process: 49/50
[25/04/20 16:03:30] [eval.py:   47]: Test Batch Process: 50/50
[25/04/20 16:03:30] [eval.py:  144]: Test set Accuracy: 0.7
