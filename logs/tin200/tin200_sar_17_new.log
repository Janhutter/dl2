[25/05/04 21:39:42] [utils.py:   78]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/05/04 21:39:42] [utils.py:   79]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: tin200
  IMG_SIZE: 64
  NUM_CHANNEL: 3
  NUM_CLASSES: 200
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: /scratch-shared/tea/tin200
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 1.0
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: sar_bn_adam-1-0.01-200_250504-213942.txt
LOG_TIME: 250504-213942
MODEL:
  ADAPTATION: sar
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.01
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  TRAIN_STEPS: 2500000
  WARMUP_STEPS: 0
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 17
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/tin200/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/gpfs/home5/scur2578/tea/main.py:35: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(os.path.join(cfg.CKPT_DIR ,'{}/{}.pth'.format(cfg.CORRUPTION.DATASET, cfg.MODEL.ARCH)))
[25/05/04 21:39:43] [main.py:   91]: test-time adaptation: SAR
[25/05/04 21:39:43] [sar.py:  151]: adapting weights for SAR
[25/05/04 21:39:43] [setada.py:  155]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=200, bias=True)
)
[25/05/04 21:39:43] [setada.py:  156]: params for adaptation: ['block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'bn1.weight', 'bn1.bias']
[25/05/04 21:39:43] [setada.py:  157]: optimizer for adaptation: SAM (
Parameter Group 0
    adaptive: False
    dampening: 0
    differentiable: False
    foreach: None
    fused: None
    lr: 0.01
    maximize: False
    momentum: 0.9
    nesterov: False
    rho: 0.05
    weight_decay: 0
)
[25/05/04 21:39:43] [eval.py:   71]: resetting model
Building model...
[25/05/04 21:39:54] [eval.py:   79]: acc % [gaussian_noise5]: 21.34%
[25/05/04 21:39:54] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:03] [eval.py:   79]: acc % [gaussian_noise4]: 24.88%
[25/05/04 21:40:03] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:12] [eval.py:   79]: acc % [gaussian_noise3]: 28.03%
[25/05/04 21:40:12] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:21] [eval.py:   79]: acc % [gaussian_noise2]: 33.31%
[25/05/04 21:40:21] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:30] [eval.py:   79]: acc % [gaussian_noise1]: 36.63%
[25/05/04 21:40:30] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:39] [eval.py:   79]: acc % [shot_noise5]: 22.67%
[25/05/04 21:40:39] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:48] [eval.py:   79]: acc % [shot_noise4]: 27.20%
[25/05/04 21:40:48] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:40:58] [eval.py:   79]: acc % [shot_noise3]: 31.19%
[25/05/04 21:40:58] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:41:07] [eval.py:   79]: acc % [shot_noise2]: 34.20%
[25/05/04 21:41:07] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:41:16] [eval.py:   79]: acc % [shot_noise1]: 35.66%
[25/05/04 21:41:16] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:41:26] [eval.py:   79]: acc % [impulse_noise5]: 16.70%
[25/05/04 21:41:26] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:41:37] [eval.py:   79]: acc % [impulse_noise4]: 23.13%
[25/05/04 21:41:37] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:41:49] [eval.py:   79]: acc % [impulse_noise3]: 28.14%
[25/05/04 21:41:49] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:42:00] [eval.py:   79]: acc % [impulse_noise2]: 33.53%
[25/05/04 21:42:00] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:42:13] [eval.py:   79]: acc % [impulse_noise1]: 35.65%
[25/05/04 21:42:13] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:42:24] [eval.py:   79]: acc % [defocus_blur5]: 26.08%
[25/05/04 21:42:24] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:42:33] [eval.py:   79]: acc % [defocus_blur4]: 30.17%
[25/05/04 21:42:33] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:42:42] [eval.py:   79]: acc % [defocus_blur3]: 35.54%
[25/05/04 21:42:42] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:42:51] [eval.py:   79]: acc % [defocus_blur2]: 36.68%
[25/05/04 21:42:51] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:00] [eval.py:   79]: acc % [defocus_blur1]: 37.28%
[25/05/04 21:43:00] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:09] [eval.py:   79]: acc % [glass_blur5]: 20.32%
[25/05/04 21:43:09] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:18] [eval.py:   79]: acc % [glass_blur4]: 26.45%
[25/05/04 21:43:18] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:27] [eval.py:   79]: acc % [glass_blur3]: 32.12%
[25/05/04 21:43:27] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:36] [eval.py:   79]: acc % [glass_blur2]: 34.74%
[25/05/04 21:43:36] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:45] [eval.py:   79]: acc % [glass_blur1]: 35.95%
[25/05/04 21:43:45] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:43:54] [eval.py:   79]: acc % [motion_blur5]: 31.58%
[25/05/04 21:43:54] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:03] [eval.py:   79]: acc % [motion_blur4]: 33.65%
[25/05/04 21:44:03] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:13] [eval.py:   79]: acc % [motion_blur3]: 34.55%
[25/05/04 21:44:13] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:22] [eval.py:   79]: acc % [motion_blur2]: 35.94%
[25/05/04 21:44:22] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:31] [eval.py:   79]: acc % [motion_blur1]: 36.75%
[25/05/04 21:44:31] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:40] [eval.py:   79]: acc % [zoom_blur5]: 31.63%
[25/05/04 21:44:40] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:49] [eval.py:   79]: acc % [zoom_blur4]: 33.08%
[25/05/04 21:44:49] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:44:58] [eval.py:   79]: acc % [zoom_blur3]: 34.74%
[25/05/04 21:44:58] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:45:07] [eval.py:   79]: acc % [zoom_blur2]: 35.45%
[25/05/04 21:45:07] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:45:16] [eval.py:   79]: acc % [zoom_blur1]: 36.40%
[25/05/04 21:45:16] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:45:25] [eval.py:   79]: acc % [snow5]: 24.13%
[25/05/04 21:45:25] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:45:34] [eval.py:   79]: acc % [snow4]: 23.21%
[25/05/04 21:45:34] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:45:43] [eval.py:   79]: acc % [snow3]: 28.22%
[25/05/04 21:45:43] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:45:52] [eval.py:   79]: acc % [snow2]: 32.48%
[25/05/04 21:45:52] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:01] [eval.py:   79]: acc % [snow1]: 35.25%
[25/05/04 21:46:01] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:11] [eval.py:   79]: acc % [frost5]: 26.37%
[25/05/04 21:46:11] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:20] [eval.py:   79]: acc % [frost4]: 28.35%
[25/05/04 21:46:20] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:29] [eval.py:   79]: acc % [frost3]: 30.09%
[25/05/04 21:46:29] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:38] [eval.py:   79]: acc % [frost2]: 31.95%
[25/05/04 21:46:38] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:48] [eval.py:   79]: acc % [frost1]: 34.35%
[25/05/04 21:46:48] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:46:57] [eval.py:   79]: acc % [fog5]: 19.42%
[25/05/04 21:46:57] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:47:07] [eval.py:   79]: acc % [fog4]: 25.19%
[25/05/04 21:47:07] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:47:17] [eval.py:   79]: acc % [fog3]: 30.01%
[25/05/04 21:47:17] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:47:27] [eval.py:   79]: acc % [fog2]: 33.81%
[25/05/04 21:47:27] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:47:38] [eval.py:   79]: acc % [fog1]: 35.84%
[25/05/04 21:47:38] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:47:49] [eval.py:   79]: acc % [brightness5]: 27.03%
[25/05/04 21:47:49] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:48:00] [eval.py:   79]: acc % [brightness4]: 30.27%
[25/05/04 21:48:00] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:48:11] [eval.py:   79]: acc % [brightness3]: 33.30%
[25/05/04 21:48:11] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:48:21] [eval.py:   79]: acc % [brightness2]: 35.53%
[25/05/04 21:48:21] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:48:32] [eval.py:   79]: acc % [brightness1]: 37.39%
[25/05/04 21:48:32] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:48:44] [eval.py:   79]: acc % [contrast5]: 2.25%
[25/05/04 21:48:44] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:48:56] [eval.py:   79]: acc % [contrast4]: 5.95%
[25/05/04 21:48:56] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:49:09] [eval.py:   79]: acc % [contrast3]: 18.41%
[25/05/04 21:49:09] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:49:21] [eval.py:   79]: acc % [contrast2]: 24.46%
[25/05/04 21:49:21] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:49:32] [eval.py:   79]: acc % [contrast1]: 29.18%
[25/05/04 21:49:32] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:49:43] [eval.py:   79]: acc % [elastic_transform5]: 31.65%
[25/05/04 21:49:43] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:49:55] [eval.py:   79]: acc % [elastic_transform4]: 34.90%
[25/05/04 21:49:55] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:50:07] [eval.py:   79]: acc % [elastic_transform3]: 35.40%
[25/05/04 21:50:07] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:50:19] [eval.py:   79]: acc % [elastic_transform2]: 36.08%
[25/05/04 21:50:19] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:50:29] [eval.py:   79]: acc % [elastic_transform1]: 35.00%
[25/05/04 21:50:29] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:50:39] [eval.py:   79]: acc % [pixelate5]: 37.60%
[25/05/04 21:50:39] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:50:49] [eval.py:   79]: acc % [pixelate4]: 36.39%
[25/05/04 21:50:49] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:50:58] [eval.py:   79]: acc % [pixelate3]: 37.01%
[25/05/04 21:50:58] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:51:07] [eval.py:   79]: acc % [pixelate2]: 36.88%
[25/05/04 21:51:07] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:51:16] [eval.py:   79]: acc % [pixelate1]: 37.75%
[25/05/04 21:51:16] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:51:25] [eval.py:   79]: acc % [jpeg_compression5]: 33.54%
[25/05/04 21:51:25] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:51:34] [eval.py:   79]: acc % [jpeg_compression4]: 35.24%
[25/05/04 21:51:34] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:51:43] [eval.py:   79]: acc % [jpeg_compression3]: 35.76%
[25/05/04 21:51:43] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:51:52] [eval.py:   79]: acc % [jpeg_compression2]: 36.10%
[25/05/04 21:51:52] [eval.py:   71]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:52:01] [eval.py:   79]: acc % [jpeg_compression1]: 36.62%
[25/05/04 21:52:01] [eval.py:   85]: 
                          1         2         3        4         5       avg
gaussian_noise     0.213400  0.248800  0.280300  0.33310  0.366300  0.288380
shot_noise         0.226700  0.272000  0.311900  0.34200  0.356600  0.301840
impulse_noise      0.167000  0.231300  0.281400  0.33530  0.356500  0.274300
defocus_blur       0.260800  0.301700  0.355400  0.36680  0.372800  0.331500
glass_blur         0.203200  0.264500  0.321200  0.34740  0.359500  0.299160
motion_blur        0.315800  0.336500  0.345500  0.35940  0.367500  0.344940
zoom_blur          0.316300  0.330800  0.347400  0.35450  0.364000  0.342600
snow               0.241300  0.232100  0.282200  0.32480  0.352500  0.286580
frost              0.263700  0.283500  0.300900  0.31950  0.343500  0.302220
fog                0.194200  0.251900  0.300100  0.33810  0.358400  0.288540
brightness         0.270300  0.302700  0.333000  0.35530  0.373900  0.327040
contrast           0.022500  0.059500  0.184100  0.24460  0.291800  0.160500
elastic_transform  0.316500  0.349000  0.354000  0.36080  0.350000  0.346060
pixelate           0.376000  0.363900  0.370100  0.36880  0.377500  0.371260
jpeg_compression   0.335400  0.352400  0.357600  0.36100  0.366200  0.354520
average            0.248207  0.278707  0.315007  0.34076  0.357133  0.307963
[25/05/04 21:52:01] [eval.py:  126]: resetting model
torch.Size([10000, 3, 32, 32]) 10000
[25/05/04 21:52:04] [eval.py:   47]: Test Batch Process: 1/50
[25/05/04 21:52:04] [eval.py:   47]: Test Batch Process: 2/50
[25/05/04 21:52:04] [eval.py:   47]: Test Batch Process: 3/50
[25/05/04 21:52:04] [eval.py:   47]: Test Batch Process: 4/50
[25/05/04 21:52:04] [eval.py:   47]: Test Batch Process: 5/50
[25/05/04 21:52:04] [eval.py:   47]: Test Batch Process: 6/50
[25/05/04 21:52:05] [eval.py:   47]: Test Batch Process: 7/50
[25/05/04 21:52:05] [eval.py:   47]: Test Batch Process: 8/50
[25/05/04 21:52:05] [eval.py:   47]: Test Batch Process: 9/50
[25/05/04 21:52:05] [eval.py:   47]: Test Batch Process: 10/50
[25/05/04 21:52:05] [eval.py:   47]: Test Batch Process: 11/50
[25/05/04 21:52:05] [eval.py:   47]: Test Batch Process: 12/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 13/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 14/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 15/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 16/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 17/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 18/50
[25/05/04 21:52:06] [eval.py:   47]: Test Batch Process: 19/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 20/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 21/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 22/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 23/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 24/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 25/50
[25/05/04 21:52:07] [eval.py:   47]: Test Batch Process: 26/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 27/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 28/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 29/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 30/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 31/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 32/50
[25/05/04 21:52:08] [eval.py:   47]: Test Batch Process: 33/50
[25/05/04 21:52:09] [eval.py:   47]: Test Batch Process: 34/50
[25/05/04 21:52:09] [eval.py:   47]: Test Batch Process: 35/50
[25/05/04 21:52:09] [eval.py:   47]: Test Batch Process: 36/50
[25/05/04 21:52:09] [eval.py:   47]: Test Batch Process: 37/50
[25/05/04 21:52:09] [eval.py:   47]: Test Batch Process: 38/50
[25/05/04 21:52:09] [eval.py:   47]: Test Batch Process: 39/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 40/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 41/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 42/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 43/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 44/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 45/50
[25/05/04 21:52:10] [eval.py:   47]: Test Batch Process: 46/50
[25/05/04 21:52:11] [eval.py:   47]: Test Batch Process: 47/50
[25/05/04 21:52:11] [eval.py:   47]: Test Batch Process: 48/50
[25/05/04 21:52:11] [eval.py:   47]: Test Batch Process: 49/50
[25/05/04 21:52:11] [eval.py:   47]: Test Batch Process: 50/50
[25/05/04 21:52:11] [eval.py:  145]: Test set Accuracy: 0.61
