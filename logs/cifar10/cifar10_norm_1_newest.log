[25/05/05 16:58:44] [utils.py:   78]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/05/05 16:58:44] [utils.py:   79]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 10
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: /scratch-shared/tea/cifar10
DESC: 
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 1.0
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: norm_bn_adam-1-0.001-200_250505-165844.txt
LOG_TIME: 250505-165844
MODEL:
  ADAPTATION: norm
  ADA_PARAM: ['bn']
  ARCH: WRN2810_BN
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 200
  BETA: 0.9
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 1
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar10/bn-wrn-28-10
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
/home/scur2578/.local/lib/python3.9/site-packages/robustbench/utils.py:165: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(model_path, map_location=torch.device('cpu'))
[25/05/05 16:58:45] [main.py:   76]: test-time adaptation: NORM
[25/05/05 16:58:45] [setada.py:   29]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/05/05 16:58:45] [setada.py:   31]: stats for adaptation: ['block1.layer.0.bn1.running_mean', 'block1.layer.0.bn1.running_var', 'block1.layer.0.bn1.num_batches_tracked', 'block1.layer.0.bn2.running_mean', 'block1.layer.0.bn2.running_var', 'block1.layer.0.bn2.num_batches_tracked', 'block1.layer.1.bn1.running_mean', 'block1.layer.1.bn1.running_var', 'block1.layer.1.bn1.num_batches_tracked', 'block1.layer.1.bn2.running_mean', 'block1.layer.1.bn2.running_var', 'block1.layer.1.bn2.num_batches_tracked', 'block1.layer.2.bn1.running_mean', 'block1.layer.2.bn1.running_var', 'block1.layer.2.bn1.num_batches_tracked', 'block1.layer.2.bn2.running_mean', 'block1.layer.2.bn2.running_var', 'block1.layer.2.bn2.num_batches_tracked', 'block1.layer.3.bn1.running_mean', 'block1.layer.3.bn1.running_var', 'block1.layer.3.bn1.num_batches_tracked', 'block1.layer.3.bn2.running_mean', 'block1.layer.3.bn2.running_var', 'block1.layer.3.bn2.num_batches_tracked', 'block2.layer.0.bn1.running_mean', 'block2.layer.0.bn1.running_var', 'block2.layer.0.bn1.num_batches_tracked', 'block2.layer.0.bn2.running_mean', 'block2.layer.0.bn2.running_var', 'block2.layer.0.bn2.num_batches_tracked', 'block2.layer.1.bn1.running_mean', 'block2.layer.1.bn1.running_var', 'block2.layer.1.bn1.num_batches_tracked', 'block2.layer.1.bn2.running_mean', 'block2.layer.1.bn2.running_var', 'block2.layer.1.bn2.num_batches_tracked', 'block2.layer.2.bn1.running_mean', 'block2.layer.2.bn1.running_var', 'block2.layer.2.bn1.num_batches_tracked', 'block2.layer.2.bn2.running_mean', 'block2.layer.2.bn2.running_var', 'block2.layer.2.bn2.num_batches_tracked', 'block2.layer.3.bn1.running_mean', 'block2.layer.3.bn1.running_var', 'block2.layer.3.bn1.num_batches_tracked', 'block2.layer.3.bn2.running_mean', 'block2.layer.3.bn2.running_var', 'block2.layer.3.bn2.num_batches_tracked', 'block3.layer.0.bn1.running_mean', 'block3.layer.0.bn1.running_var', 'block3.layer.0.bn1.num_batches_tracked', 'block3.layer.0.bn2.running_mean', 'block3.layer.0.bn2.running_var', 'block3.layer.0.bn2.num_batches_tracked', 'block3.layer.1.bn1.running_mean', 'block3.layer.1.bn1.running_var', 'block3.layer.1.bn1.num_batches_tracked', 'block3.layer.1.bn2.running_mean', 'block3.layer.1.bn2.running_var', 'block3.layer.1.bn2.num_batches_tracked', 'block3.layer.2.bn1.running_mean', 'block3.layer.2.bn1.running_var', 'block3.layer.2.bn1.num_batches_tracked', 'block3.layer.2.bn2.running_mean', 'block3.layer.2.bn2.running_var', 'block3.layer.2.bn2.num_batches_tracked', 'block3.layer.3.bn1.running_mean', 'block3.layer.3.bn1.running_var', 'block3.layer.3.bn1.num_batches_tracked', 'block3.layer.3.bn2.running_mean', 'block3.layer.3.bn2.running_var', 'block3.layer.3.bn2.num_batches_tracked', 'bn1.running_mean', 'bn1.running_var', 'bn1.num_batches_tracked']
[25/05/05 16:58:45] [eval.py:   71]: resetting model
[25/05/05 16:58:47] [eval.py:   79]: acc % [gaussian_noise5]: 71.72%
[25/05/05 16:58:47] [eval.py:   71]: resetting model
[25/05/05 16:58:49] [eval.py:   79]: acc % [gaussian_noise4]: 74.98%
[25/05/05 16:58:49] [eval.py:   71]: resetting model
[25/05/05 16:58:51] [eval.py:   79]: acc % [gaussian_noise3]: 77.85%
[25/05/05 16:58:51] [eval.py:   71]: resetting model
[25/05/05 16:58:53] [eval.py:   79]: acc % [gaussian_noise2]: 83.29%
[25/05/05 16:58:53] [eval.py:   71]: resetting model
[25/05/05 16:58:55] [eval.py:   79]: acc % [gaussian_noise1]: 87.99%
[25/05/05 16:58:55] [eval.py:   71]: resetting model
[25/05/05 16:58:56] [eval.py:   79]: acc % [shot_noise5]: 73.84%
[25/05/05 16:58:56] [eval.py:   71]: resetting model
[25/05/05 16:58:58] [eval.py:   79]: acc % [shot_noise4]: 79.08%
[25/05/05 16:58:58] [eval.py:   71]: resetting model
[25/05/05 16:59:00] [eval.py:   79]: acc % [shot_noise3]: 81.36%
[25/05/05 16:59:00] [eval.py:   71]: resetting model
[25/05/05 16:59:02] [eval.py:   79]: acc % [shot_noise2]: 87.69%
[25/05/05 16:59:02] [eval.py:   71]: resetting model
[25/05/05 16:59:03] [eval.py:   79]: acc % [shot_noise1]: 90.27%
[25/05/05 16:59:03] [eval.py:   71]: resetting model
[25/05/05 16:59:05] [eval.py:   79]: acc % [impulse_noise5]: 64.07%
[25/05/05 16:59:05] [eval.py:   71]: resetting model
[25/05/05 16:59:07] [eval.py:   79]: acc % [impulse_noise4]: 70.73%
[25/05/05 16:59:07] [eval.py:   71]: resetting model
[25/05/05 16:59:09] [eval.py:   79]: acc % [impulse_noise3]: 79.55%
[25/05/05 16:59:09] [eval.py:   71]: resetting model
[25/05/05 16:59:11] [eval.py:   79]: acc % [impulse_noise2]: 84.07%
[25/05/05 16:59:11] [eval.py:   71]: resetting model
[25/05/05 16:59:12] [eval.py:   79]: acc % [impulse_noise1]: 89.02%
[25/05/05 16:59:12] [eval.py:   71]: resetting model
[25/05/05 16:59:14] [eval.py:   79]: acc % [defocus_blur5]: 87.18%
[25/05/05 16:59:14] [eval.py:   71]: resetting model
[25/05/05 16:59:16] [eval.py:   79]: acc % [defocus_blur4]: 91.27%
[25/05/05 16:59:16] [eval.py:   71]: resetting model
[25/05/05 16:59:18] [eval.py:   79]: acc % [defocus_blur3]: 93.33%
[25/05/05 16:59:18] [eval.py:   71]: resetting model
[25/05/05 16:59:19] [eval.py:   79]: acc % [defocus_blur2]: 93.73%
[25/05/05 16:59:19] [eval.py:   71]: resetting model
[25/05/05 16:59:21] [eval.py:   79]: acc % [defocus_blur1]: 93.95%
[25/05/05 16:59:21] [eval.py:   71]: resetting model
[25/05/05 16:59:23] [eval.py:   79]: acc % [glass_blur5]: 64.88%
[25/05/05 16:59:23] [eval.py:   71]: resetting model
[25/05/05 16:59:25] [eval.py:   79]: acc % [glass_blur4]: 65.11%
[25/05/05 16:59:25] [eval.py:   71]: resetting model
[25/05/05 16:59:26] [eval.py:   79]: acc % [glass_blur3]: 76.49%
[25/05/05 16:59:26] [eval.py:   71]: resetting model
[25/05/05 16:59:28] [eval.py:   79]: acc % [glass_blur2]: 75.31%
[25/05/05 16:59:28] [eval.py:   71]: resetting model
[25/05/05 16:59:30] [eval.py:   79]: acc % [glass_blur1]: 75.96%
[25/05/05 16:59:30] [eval.py:   71]: resetting model
[25/05/05 16:59:32] [eval.py:   79]: acc % [motion_blur5]: 86.08%
[25/05/05 16:59:32] [eval.py:   71]: resetting model
[25/05/05 16:59:34] [eval.py:   79]: acc % [motion_blur4]: 88.73%
[25/05/05 16:59:34] [eval.py:   71]: resetting model
[25/05/05 16:59:35] [eval.py:   79]: acc % [motion_blur3]: 88.75%
[25/05/05 16:59:35] [eval.py:   71]: resetting model
[25/05/05 16:59:37] [eval.py:   79]: acc % [motion_blur2]: 90.37%
[25/05/05 16:59:37] [eval.py:   71]: resetting model
[25/05/05 16:59:39] [eval.py:   79]: acc % [motion_blur1]: 92.08%
[25/05/05 16:59:39] [eval.py:   71]: resetting model
[25/05/05 16:59:41] [eval.py:   79]: acc % [zoom_blur5]: 87.73%
[25/05/05 16:59:41] [eval.py:   71]: resetting model
[25/05/05 16:59:42] [eval.py:   79]: acc % [zoom_blur4]: 90.27%
[25/05/05 16:59:42] [eval.py:   71]: resetting model
[25/05/05 16:59:44] [eval.py:   79]: acc % [zoom_blur3]: 91.23%
[25/05/05 16:59:44] [eval.py:   71]: resetting model
[25/05/05 16:59:46] [eval.py:   79]: acc % [zoom_blur2]: 92.19%
[25/05/05 16:59:46] [eval.py:   71]: resetting model
[25/05/05 16:59:48] [eval.py:   79]: acc % [zoom_blur1]: 92.04%
[25/05/05 16:59:48] [eval.py:   71]: resetting model
[25/05/05 16:59:49] [eval.py:   79]: acc % [snow5]: 82.69%
[25/05/05 16:59:49] [eval.py:   71]: resetting model
[25/05/05 16:59:51] [eval.py:   79]: acc % [snow4]: 83.49%
[25/05/05 16:59:51] [eval.py:   71]: resetting model
[25/05/05 16:59:53] [eval.py:   79]: acc % [snow3]: 86.14%
[25/05/05 16:59:53] [eval.py:   71]: resetting model
[25/05/05 16:59:55] [eval.py:   79]: acc % [snow2]: 85.72%
[25/05/05 16:59:55] [eval.py:   71]: resetting model
[25/05/05 16:59:57] [eval.py:   79]: acc % [snow1]: 90.78%
[25/05/05 16:59:57] [eval.py:   71]: resetting model
[25/05/05 16:59:58] [eval.py:   79]: acc % [frost5]: 82.23%
[25/05/05 16:59:58] [eval.py:   71]: resetting model
[25/05/05 17:00:00] [eval.py:   79]: acc % [frost4]: 85.44%
[25/05/05 17:00:00] [eval.py:   71]: resetting model
[25/05/05 17:00:02] [eval.py:   79]: acc % [frost3]: 85.94%
[25/05/05 17:00:02] [eval.py:   71]: resetting model
[25/05/05 17:00:04] [eval.py:   79]: acc % [frost2]: 88.92%
[25/05/05 17:00:04] [eval.py:   71]: resetting model
[25/05/05 17:00:05] [eval.py:   79]: acc % [frost1]: 91.70%
[25/05/05 17:00:05] [eval.py:   71]: resetting model
[25/05/05 17:00:07] [eval.py:   79]: acc % [fog5]: 85.03%
[25/05/05 17:00:07] [eval.py:   71]: resetting model
[25/05/05 17:00:09] [eval.py:   79]: acc % [fog4]: 90.93%
[25/05/05 17:00:09] [eval.py:   71]: resetting model
[25/05/05 17:00:11] [eval.py:   79]: acc % [fog3]: 92.85%
[25/05/05 17:00:11] [eval.py:   71]: resetting model
[25/05/05 17:00:12] [eval.py:   79]: acc % [fog2]: 93.58%
[25/05/05 17:00:12] [eval.py:   71]: resetting model
[25/05/05 17:00:14] [eval.py:   79]: acc % [fog1]: 94.05%
[25/05/05 17:00:14] [eval.py:   71]: resetting model
[25/05/05 17:00:16] [eval.py:   79]: acc % [brightness5]: 91.66%
[25/05/05 17:00:16] [eval.py:   71]: resetting model
[25/05/05 17:00:18] [eval.py:   79]: acc % [brightness4]: 93.14%
[25/05/05 17:00:18] [eval.py:   71]: resetting model
[25/05/05 17:00:20] [eval.py:   79]: acc % [brightness3]: 93.43%
[25/05/05 17:00:20] [eval.py:   71]: resetting model
[25/05/05 17:00:21] [eval.py:   79]: acc % [brightness2]: 93.92%
[25/05/05 17:00:21] [eval.py:   71]: resetting model
[25/05/05 17:00:23] [eval.py:   79]: acc % [brightness1]: 93.96%
[25/05/05 17:00:23] [eval.py:   71]: resetting model
[25/05/05 17:00:25] [eval.py:   79]: acc % [contrast5]: 86.85%
[25/05/05 17:00:25] [eval.py:   71]: resetting model
[25/05/05 17:00:27] [eval.py:   79]: acc % [contrast4]: 91.29%
[25/05/05 17:00:27] [eval.py:   71]: resetting model
[25/05/05 17:00:28] [eval.py:   79]: acc % [contrast3]: 92.33%
[25/05/05 17:00:28] [eval.py:   71]: resetting model
[25/05/05 17:00:30] [eval.py:   79]: acc % [contrast2]: 93.14%
[25/05/05 17:00:30] [eval.py:   71]: resetting model
[25/05/05 17:00:32] [eval.py:   79]: acc % [contrast1]: 93.73%
[25/05/05 17:00:32] [eval.py:   71]: resetting model
[25/05/05 17:00:34] [eval.py:   79]: acc % [elastic_transform5]: 76.50%
[25/05/05 17:00:34] [eval.py:   71]: resetting model
[25/05/05 17:00:35] [eval.py:   79]: acc % [elastic_transform4]: 84.50%
[25/05/05 17:00:35] [eval.py:   71]: resetting model
[25/05/05 17:00:37] [eval.py:   79]: acc % [elastic_transform3]: 90.26%
[25/05/05 17:00:37] [eval.py:   71]: resetting model
[25/05/05 17:00:39] [eval.py:   79]: acc % [elastic_transform2]: 91.09%
[25/05/05 17:00:39] [eval.py:   71]: resetting model
[25/05/05 17:00:41] [eval.py:   79]: acc % [elastic_transform1]: 90.84%
[25/05/05 17:00:41] [eval.py:   71]: resetting model
[25/05/05 17:00:43] [eval.py:   79]: acc % [pixelate5]: 80.19%
[25/05/05 17:00:43] [eval.py:   71]: resetting model
[25/05/05 17:00:44] [eval.py:   79]: acc % [pixelate4]: 86.04%
[25/05/05 17:00:44] [eval.py:   71]: resetting model
[25/05/05 17:00:46] [eval.py:   79]: acc % [pixelate3]: 90.04%
[25/05/05 17:00:46] [eval.py:   71]: resetting model
[25/05/05 17:00:48] [eval.py:   79]: acc % [pixelate2]: 91.24%
[25/05/05 17:00:48] [eval.py:   71]: resetting model
[25/05/05 17:00:50] [eval.py:   79]: acc % [pixelate1]: 92.28%
[25/05/05 17:00:50] [eval.py:   71]: resetting model
[25/05/05 17:00:51] [eval.py:   79]: acc % [jpeg_compression5]: 72.55%
[25/05/05 17:00:51] [eval.py:   71]: resetting model
[25/05/05 17:00:53] [eval.py:   79]: acc % [jpeg_compression4]: 76.14%
[25/05/05 17:00:53] [eval.py:   71]: resetting model
[25/05/05 17:00:55] [eval.py:   79]: acc % [jpeg_compression3]: 78.78%
[25/05/05 17:00:55] [eval.py:   71]: resetting model
[25/05/05 17:00:57] [eval.py:   79]: acc % [jpeg_compression2]: 80.73%
[25/05/05 17:00:57] [eval.py:   71]: resetting model
[25/05/05 17:00:58] [eval.py:   79]: acc % [jpeg_compression1]: 86.54%
[25/05/05 17:00:58] [eval.py:   85]: 
                          1         2         3         4        5      avg
gaussian_noise     0.717200  0.749800  0.778500  0.832900  0.87990  0.79166
shot_noise         0.738400  0.790800  0.813600  0.876900  0.90270  0.82448
impulse_noise      0.640700  0.707300  0.795500  0.840700  0.89020  0.77488
defocus_blur       0.871800  0.912700  0.933300  0.937300  0.93950  0.91892
glass_blur         0.648800  0.651100  0.764900  0.753100  0.75960  0.71550
motion_blur        0.860800  0.887300  0.887500  0.903700  0.92080  0.89202
zoom_blur          0.877300  0.902700  0.912300  0.921900  0.92040  0.90692
snow               0.826900  0.834900  0.861400  0.857200  0.90780  0.85764
frost              0.822300  0.854400  0.859400  0.889200  0.91700  0.86846
fog                0.850300  0.909300  0.928500  0.935800  0.94050  0.91288
brightness         0.916600  0.931400  0.934300  0.939200  0.93960  0.93222
contrast           0.868500  0.912900  0.923300  0.931400  0.93730  0.91468
elastic_transform  0.765000  0.845000  0.902600  0.910900  0.90840  0.86638
pixelate           0.801900  0.860400  0.900400  0.912400  0.92280  0.87958
jpeg_compression   0.725500  0.761400  0.787800  0.807300  0.86540  0.78948
average            0.795467  0.834093  0.865553  0.883327  0.90346  0.85638
[25/05/05 17:00:58] [eval.py:  126]: resetting model
[25/05/05 17:01:02] [eval.py:  138]: Test set Accuracy: 0.9397
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
torch.Size([10000, 3, 32, 32]) 10000
Files already downloaded and verified
torch.Size([10000, 3, 32, 32]) 10000
