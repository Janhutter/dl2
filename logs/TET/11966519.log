[25/05/21 20:11:30] [utils.py:   82]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/05/21 20:11:30] [utils.py:   83]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 10
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: /scratch-shared/tea2/cifar10
DESC: 
EARLY_STOP_BEGIN: 70
EARLY_STOP_PATIENCE: 30
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 0.1
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: pretrain_TET_all_sgd-1-0.1-1024_uncond-20-0.1-0.01-10000-0.05_250521-201130.txt
LOG_TIME: 250521-201130
MODEL:
  ADAPTATION: energy
  ADA_PARAM: ['all']
  ARCH: WRN2810_TET
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 1024
  BETA: 0.9
  CLIP_NORM: False
  DAMPENING: 0.0
  LAMBDA_CLS: 1.0
  LAMBDA_ENERGY: 0.01
  LR: 0.1
  METHOD: sgd
  MOMENTUM: 0.9
  NESTEROV: True
  N_EPOCHS: 200
  SCHEDULER_GAMMA: 0.2
  SCHEDULER_MILESTONES: [60, 120, 160]
  STEPS: 1
  TEST_BATCH_SIZE: 128
  WD: 0.0005
OPTIM_ENERGY:
  BATCH_SIZE: 128
  BETA: 0.9
  CLIP_NORM: False
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 1
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar10/bn-wrn-28-10-tet
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
wandb: Currently logged in as: schaapman-henk (jan-hutter) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.19.11
wandb: Run data is saved locally in /gpfs/home5/jhutter/dl2/wandb/run-20250521_201131-fvm5jvme
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run train_tet
wandb: ‚≠êÔ∏è View project at https://wandb.ai/jan-hutter/TET
wandb: üöÄ View run at https://wandb.ai/jan-hutter/TET/runs/fvm5jvme
[25/05/21 20:11:46] [param.py:   14]: adapting all weights
[25/05/21 20:11:46] [setada.py:  138]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/05/21 20:11:46] [setada.py:  139]: params for adaptation: all
[25/05/21 20:11:46] [setada.py:  140]: optimizer for adaptation: SGD (
Parameter Group 0
    dampening: 0.0
    differentiable: False
    foreach: None
    fused: None
    lr: 0.1
    maximize: False
    momentum: 0.9
    nesterov: True
    weight_decay: 0.0005
)
Building model...
Files already downloaded and verified
Files already downloaded and verified
len(cls_params)=30
len(energy_params)=50
Training:   0%|          | 0/200 [00:00<?, ?epoch/s][25/05/21 20:11:48] [energy.py:  121]: counter=None, step=0
[25/05/21 20:12:13] [energy.py:  121]: counter=None, step=0
[25/05/21 20:12:23] [energy.py:  121]: counter=None, step=0
[25/05/21 20:12:33] [energy.py:  121]: counter=None, step=0
[25/05/21 20:12:43] [energy.py:  121]: counter=None, step=0
[25/05/21 20:12:53] [energy.py:  121]: counter=None, step=0
[25/05/21 20:13:03] [energy.py:  121]: counter=None, step=0
[25/05/21 20:13:13] [energy.py:  121]: counter=None, step=0
[25/05/21 20:13:23] [energy.py:  121]: counter=None, step=0
[25/05/21 20:13:33] [energy.py:  121]: counter=None, step=0
[25/05/21 20:13:43] [energy.py:  121]: counter=None, step=0
[25/05/21 20:13:53] [energy.py:  121]: counter=None, step=0
[25/05/21 20:14:03] [energy.py:  121]: counter=None, step=0
[25/05/21 20:14:13] [energy.py:  121]: counter=None, step=0
[25/05/21 20:14:23] [energy.py:  121]: counter=None, step=0
[25/05/21 20:14:33] [energy.py:  121]: counter=None, step=0
[25/05/21 20:14:43] [energy.py:  121]: counter=None, step=0
[25/05/21 20:14:53] [energy.py:  121]: counter=None, step=0
[25/05/21 20:15:03] [energy.py:  121]: counter=None, step=0
[25/05/21 20:15:14] [energy.py:  121]: counter=None, step=0
[25/05/21 20:15:24] [energy.py:  121]: counter=None, step=0
[25/05/21 20:15:34] [energy.py:  121]: counter=None, step=0
[25/05/21 20:15:44] [energy.py:  121]: counter=None, step=0
[25/05/21 20:15:54] [energy.py:  121]: counter=None, step=0
[25/05/21 20:16:04] [energy.py:  121]: counter=None, step=0
[25/05/21 20:16:14] [energy.py:  121]: counter=None, step=0
[25/05/21 20:16:24] [energy.py:  121]: counter=None, step=0
[25/05/21 20:16:34] [energy.py:  121]: counter=None, step=0
[25/05/21 20:16:44] [energy.py:  121]: counter=None, step=0
[25/05/21 20:16:54] [energy.py:  121]: counter=None, step=0
[25/05/21 20:17:04] [energy.py:  121]: counter=None, step=0
[25/05/21 20:17:14] [energy.py:  121]: counter=None, step=0
[25/05/21 20:17:24] [energy.py:  121]: counter=None, step=0
[25/05/21 20:17:34] [energy.py:  121]: counter=None, step=0
[25/05/21 20:17:44] [energy.py:  121]: counter=None, step=0
[25/05/21 20:17:54] [energy.py:  121]: counter=None, step=0
[25/05/21 20:18:04] [energy.py:  121]: counter=None, step=0
[25/05/21 20:18:14] [energy.py:  121]: counter=None, step=0
[25/05/21 20:18:24] [energy.py:  121]: counter=None, step=0
[25/05/21 20:18:34] [energy.py:  121]: counter=None, step=0
[25/05/21 20:18:44] [energy.py:  121]: counter=None, step=0
[25/05/21 20:18:54] [energy.py:  121]: counter=None, step=0
[25/05/21 20:19:04] [energy.py:  121]: counter=None, step=0
[25/05/21 20:19:14] [energy.py:  121]: counter=None, step=0
[25/05/21 20:19:24] [energy.py:  121]: counter=None, step=0
[25/05/21 20:19:34] [energy.py:  121]: counter=None, step=0
[25/05/21 20:19:44] [energy.py:  121]: counter=None, step=0
[25/05/21 20:19:54] [energy.py:  121]: counter=None, step=0
[25/05/21 20:20:04] [energy.py:  121]: counter=None, step=0
Training:   0%|          | 1/200 [08:28<28:07:24, 508.77s/epoch][25/05/21 20:20:18] [energy.py:  121]: counter=None, step=0
Training:   0%|          | 1/200 [08:44<28:59:44, 524.54s/epoch]
Traceback (most recent call last):
  File "/gpfs/home5/jhutter/dl2/train_TET.py", line 335, in <module>
    main()
  File "/gpfs/home5/jhutter/dl2/train_TET.py", line 78, in main
    train(cfg, base_model, device)
  File "/gpfs/home5/jhutter/dl2/train_TET.py", line 204, in train
    cls_loss.backward(retain_graph=True)
  File "/home/jhutter/.local/lib/python3.11/site-packages/torch/_tensor.py", line 581, in backward
    torch.autograd.backward(
  File "/home/jhutter/.local/lib/python3.11/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/jhutter/.local/lib/python3.11/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 640.00 MiB. GPU 0 has a total capacity of 39.50 GiB of which 202.12 MiB is free. Including non-PyTorch memory, this process has 39.29 GiB memory in use. Of the allocated memory 37.09 GiB is allocated by PyTorch, and 1.70 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33mtrain_tet[0m at: [34mhttps://wandb.ai/jan-hutter/TET/runs/fvm5jvme[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250521_201131-fvm5jvme/logs[0m

JOB STATISTICS
==============
Job ID: 11966519
Cluster: snellius
User/Group: jhutter/jhutter
State: FAILED (exit code 1)
Nodes: 1
Cores per node: 18
CPU Utilized: 00:09:01
CPU Efficiency: 5.25% of 02:51:36 core-walltime
Job Wall-clock time: 00:09:32
Memory Utilized: 2.12 GB
Memory Efficiency: 1.76% of 120.00 GB (120.00 GB/node)
