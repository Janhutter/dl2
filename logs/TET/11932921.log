[25/05/20 08:59:22] [utils.py:   82]: PyTorch Version: torch=2.5.0+cu124, cuda=12.4, cudnn=90100
[25/05/20 08:59:22] [utils.py:   83]: BN:
  EPS: 1e-05
  MOM: 0.1
CKPT_DIR: ./ckpt
CORRUPTION:
  DATASET: cifar10
  IMG_SIZE: 32
  NUM_CHANNEL: 3
  NUM_CLASSES: 10
  NUM_EX: 10000
  SEVERITY: [5, 4, 3, 2, 1]
  TYPE: ['gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur', 'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog', 'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression']
CUDNN:
  BENCHMARK: True
DATA_DIR: /scratch-shared/tea2/cifar10
DESC: 
EARLY_STOP_BEGIN: 70
EARLY_STOP_PATIENCE: 30
EATA:
  D_MARGIN: 0.05
  E_MARGIN: 2.763102111592855
  FISHER_ALPHA: 2000.0
  FISHER_SIZE: 2000
  USE_FISHER: False
EBM:
  BUFFER_SIZE: 10000
  REINIT_FREQ: 0.05
  SGLD_LR: 0.1
  SGLD_STD: 0.01
  STEPS: 20
  UNCOND: uncond
LOG_DEST: pretrain_TET_bn_sgd-1-0.1-1024_250520-085922.txt
LOG_TIME: 250520-085922
MODEL:
  ADAPTATION: source
  ADA_PARAM: ['bn']
  ARCH: WRN2810_TET
  EPISODIC: False
OPTIM:
  BATCH_SIZE: 1024
  BETA: 0.9
  CLIP_NORM: False
  DAMPENING: 0.0
  LAMBDA_CLS: 1.0
  LAMBDA_ENERGY: 0.01
  LR: 0.1
  METHOD: sgd
  MOMENTUM: 0.9
  NESTEROV: True
  N_EPOCHS: 200
  SCHEDULER_GAMMA: 0.2
  SCHEDULER_MILESTONES: [60, 120, 160]
  STEPS: 1
  TEST_BATCH_SIZE: 128
  WD: 0.0005
OPTIM_ENERGY:
  BATCH_SIZE: 128
  BETA: 0.9
  CLIP_NORM: False
  DAMPENING: 0.0
  LR: 0.001
  METHOD: Adam
  MOMENTUM: 0.9
  NESTEROV: True
  STEPS: 1
  WD: 0.0
PL:
  ALPHA: 0.1
  THRESHOLD: 0.9
RNG_SEED: 1
SAR:
  MARGIN_E0: 2.763102111592855
SAVE_DIR: ./save/cifar10/bn-wrn-28-10-tet
SHOT:
  CLF_COEFF: 0.1
  THRESHOLD: 0.9
TEST:
  
[25/05/20 08:59:26] [param.py:   18]: adapting weights of batch-normalization layer
[25/05/20 08:59:26] [setada.py:  138]: model for adaptation: WideResNet(
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (block1): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(16, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(16, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block2): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(160, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(160, 320, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(320, 320, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (block3): NetworkBlock(
    (layer): Sequential(
      (0): BasicBlock(
        (bn1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(320, 640, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (convShortcut): Conv2d(320, 640, kernel_size=(1, 1), stride=(2, 2), bias=False)
      )
      (1): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (2): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (3): BasicBlock(
        (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu1): ReLU(inplace=True)
        (conv1): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
        (relu2): ReLU(inplace=True)
        (conv2): Conv2d(640, 640, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
  )
  (bn1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
  (relu): ReLU(inplace=True)
  (fc): Linear(in_features=640, out_features=10, bias=True)
)
[25/05/20 08:59:26] [setada.py:  139]: params for adaptation: ['block1.layer.0.bn1.weight', 'block1.layer.0.bn1.bias', 'block1.layer.0.bn2.weight', 'block1.layer.0.bn2.bias', 'block1.layer.1.bn1.weight', 'block1.layer.1.bn1.bias', 'block1.layer.1.bn2.weight', 'block1.layer.1.bn2.bias', 'block1.layer.2.bn1.weight', 'block1.layer.2.bn1.bias', 'block1.layer.2.bn2.weight', 'block1.layer.2.bn2.bias', 'block1.layer.3.bn1.weight', 'block1.layer.3.bn1.bias', 'block1.layer.3.bn2.weight', 'block1.layer.3.bn2.bias', 'block2.layer.0.bn1.weight', 'block2.layer.0.bn1.bias', 'block2.layer.0.bn2.weight', 'block2.layer.0.bn2.bias', 'block2.layer.1.bn1.weight', 'block2.layer.1.bn1.bias', 'block2.layer.1.bn2.weight', 'block2.layer.1.bn2.bias', 'block2.layer.2.bn1.weight', 'block2.layer.2.bn1.bias', 'block2.layer.2.bn2.weight', 'block2.layer.2.bn2.bias', 'block2.layer.3.bn1.weight', 'block2.layer.3.bn1.bias', 'block2.layer.3.bn2.weight', 'block2.layer.3.bn2.bias', 'block3.layer.0.bn1.weight', 'block3.layer.0.bn1.bias', 'block3.layer.0.bn2.weight', 'block3.layer.0.bn2.bias', 'block3.layer.1.bn1.weight', 'block3.layer.1.bn1.bias', 'block3.layer.1.bn2.weight', 'block3.layer.1.bn2.bias', 'block3.layer.2.bn1.weight', 'block3.layer.2.bn1.bias', 'block3.layer.2.bn2.weight', 'block3.layer.2.bn2.bias', 'block3.layer.3.bn1.weight', 'block3.layer.3.bn1.bias', 'block3.layer.3.bn2.weight', 'block3.layer.3.bn2.bias', 'bn1.weight', 'bn1.bias']
[25/05/20 08:59:26] [setada.py:  140]: optimizer for adaptation: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.001
    maximize: False
    weight_decay: 0.0
)
Building model...
Files already downloaded and verified
Files already downloaded and verified
Training:   0%|          | 0/200 [00:00<?, ?epoch/s]Training:   0%|          | 1/200 [06:33<21:45:44, 393.69s/epoch]Training:   1%|          | 2/200 [13:04<21:34:09, 392.17s/epoch]Training:   2%|▏         | 3/200 [19:40<21:32:37, 393.69s/epoch]Training:   2%|▏         | 4/200 [26:21<21:36:15, 396.81s/epoch]
Testing:   0%|          | 0/79 [00:00<?, ?batch/s][A
Testing:   5%|▌         | 4/79 [00:05<01:37,  1.30s/batch][A
Testing:  11%|█▏        | 9/79 [00:10<01:20,  1.15s/batch][A
Testing:  18%|█▊        | 14/79 [00:15<01:12,  1.11s/batch][A
Testing:  24%|██▍       | 19/79 [00:21<01:05,  1.10s/batch][A
Testing:  30%|███       | 24/79 [00:26<00:59,  1.09s/batch][A
Testing:  37%|███▋      | 29/79 [00:31<00:54,  1.08s/batch][A
Testing:  43%|████▎     | 34/79 [00:37<00:48,  1.08s/batch][A
Testing:  49%|████▉     | 39/79 [00:42<00:43,  1.08s/batch][A
Testing:  56%|█████▌    | 44/79 [00:48<00:37,  1.07s/batch][A
Testing:  62%|██████▏   | 49/79 [00:53<00:32,  1.07s/batch][A
Testing:  68%|██████▊   | 54/79 [00:58<00:26,  1.07s/batch][A
Testing:  75%|███████▍  | 59/79 [01:04<00:21,  1.07s/batch][A
Testing:  81%|████████  | 64/79 [01:09<00:16,  1.07s/batch][A
Testing:  87%|████████▋ | 69/79 [01:14<00:10,  1.07s/batch][A
Testing:  94%|█████████▎| 74/79 [01:20<00:05,  1.07s/batch][ATesting: 100%|██████████| 79/79 [01:24<00:00,  1.07s/batch]
[25/05/20 09:33:57] [train_TET.py:  225]: Test set Accuracy: 19.95
/gpfs/home5/jhutter/dl2/train_TET.py:187: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ckpt = torch.load(os.path.join('ckpt', cfg.CORRUPTION.DATASET, cfg.MODEL.ARCH, f"TET_epoch_{epoch}.pth"))
Training:   2%|▎         | 5/200 [34:31<23:18:33, 430.33s/epoch]Training:   3%|▎         | 6/200 [41:16<22:43:13, 421.62s/epoch]Training:   4%|▎         | 7/200 [48:00<22:18:08, 416.00s/epoch]Training:   4%|▍         | 8/200 [54:45<22:00:11, 412.56s/epoch]Training:   4%|▍         | 9/200 [1:01:30<21:45:31, 410.11s/epoch]
Testing:   0%|          | 0/79 [00:00<?, ?batch/s][A
Testing:   6%|▋         | 5/79 [00:05<01:22,  1.12s/batch][A
Testing:  13%|█▎        | 10/79 [00:10<01:15,  1.09s/batch][A
Testing:  19%|█▉        | 15/79 [00:16<01:09,  1.08s/batch][A
Testing:  25%|██▌       | 20/79 [00:21<01:03,  1.08s/batch][A
Testing:  32%|███▏      | 25/79 [00:27<00:58,  1.08s/batch][A
Testing:  38%|███▊      | 30/79 [00:32<00:52,  1.08s/batch][A
Testing:  44%|████▍     | 35/79 [00:37<00:47,  1.08s/batch][A
Testing:  51%|█████     | 40/79 [00:43<00:41,  1.07s/batch][A
Testing:  57%|█████▋    | 45/79 [00:48<00:36,  1.08s/batch][A
Testing:  63%|██████▎   | 50/79 [00:53<00:31,  1.07s/batch][A
Testing:  70%|██████▉   | 55/79 [00:59<00:25,  1.08s/batch][A
Testing:  76%|███████▌  | 60/79 [01:04<00:20,  1.07s/batch][A
Testing:  82%|████████▏ | 65/79 [01:10<00:15,  1.07s/batch][A
Testing:  89%|████████▊ | 70/79 [01:15<00:09,  1.07s/batch][A
Testing:  95%|█████████▍| 75/79 [01:20<00:04,  1.08s/batch][ATesting: 100%|██████████| 79/79 [01:24<00:00,  1.07s/batch]
[25/05/20 10:09:06] [train_TET.py:  225]: Test set Accuracy: 20.1
Training:   5%|▌         | 10/200 [1:09:40<22:56:31, 434.69s/epoch]Training:   6%|▌         | 11/200 [1:16:25<22:20:53, 425.68s/epoch]Training:   6%|▌         | 12/200 [1:23:10<21:53:47, 419.30s/epoch]Training:   6%|▋         | 13/200 [1:29:54<21:32:55, 414.84s/epoch]Training:   7%|▋         | 14/200 [1:36:40<21:17:05, 411.96s/epoch]
Testing:   0%|          | 0/79 [00:00<?, ?batch/s][A
Testing:   6%|▋         | 5/79 [00:05<01:22,  1.12s/batch][A
Testing:  13%|█▎        | 10/79 [00:10<01:15,  1.09s/batch][A
Testing:  19%|█▉        | 15/79 [00:16<01:09,  1.08s/batch][A
Testing:  25%|██▌       | 20/79 [00:21<01:03,  1.08s/batch][A
Testing:  32%|███▏      | 25/79 [00:27<00:58,  1.08s/batch][A
Testing:  38%|███▊      | 30/79 [00:32<00:52,  1.08s/batch][A
Testing:  44%|████▍     | 35/79 [00:37<00:47,  1.08s/batch][A
Testing:  51%|█████     | 40/79 [00:43<00:41,  1.08s/batch][A
Testing:  57%|█████▋    | 45/79 [00:48<00:36,  1.08s/batch][A
Testing:  63%|██████▎   | 50/79 [00:53<00:31,  1.08s/batch][A
Testing:  70%|██████▉   | 55/79 [00:59<00:25,  1.07s/batch][A
Testing:  76%|███████▌  | 60/79 [01:04<00:20,  1.07s/batch][A
Testing:  82%|████████▏ | 65/79 [01:10<00:15,  1.07s/batch][A
Testing:  89%|████████▊ | 70/79 [01:15<00:09,  1.07s/batch][A
Testing:  95%|█████████▍| 75/79 [01:20<00:04,  1.07s/batch][ATesting: 100%|██████████| 79/79 [01:24<00:00,  1.07s/batch]
[25/05/20 10:44:16] [train_TET.py:  225]: Test set Accuracy: 23.5
Training:   8%|▊         | 15/200 [1:44:50<22:22:49, 435.51s/epoch]Training:   8%|▊         | 16/200 [1:51:34<21:46:16, 425.96s/epoch]Training:   8%|▊         | 17/200 [1:58:17<21:18:42, 419.25s/epoch]Training:   9%|▉         | 18/200 [2:05:01<20:57:53, 414.69s/epoch]Training:  10%|▉         | 19/200 [2:11:46<20:41:40, 411.60s/epoch]
Testing:   0%|          | 0/79 [00:00<?, ?batch/s][A
Testing:   6%|▋         | 5/79 [00:05<01:22,  1.12s/batch][A
Testing:  13%|█▎        | 10/79 [00:10<01:15,  1.09s/batch][A
Testing:  19%|█▉        | 15/79 [00:16<01:09,  1.08s/batch][A
Testing:  25%|██▌       | 20/79 [00:21<01:03,  1.08s/batch][A
Testing:  32%|███▏      | 25/79 [00:27<00:58,  1.08s/batch][A
Testing:  38%|███▊      | 30/79 [00:32<00:52,  1.07s/batch][A
Testing:  44%|████▍     | 35/79 [00:37<00:47,  1.07s/batch][A
Testing:  51%|█████     | 40/79 [00:43<00:41,  1.07s/batch][A
Testing:  57%|█████▋    | 45/79 [00:48<00:36,  1.07s/batch][A
Testing:  63%|██████▎   | 50/79 [00:53<00:31,  1.07s/batch][A
Testing:  70%|██████▉   | 55/79 [00:59<00:25,  1.07s/batch][A
Testing:  76%|███████▌  | 60/79 [01:04<00:20,  1.07s/batch][A
Testing:  82%|████████▏ | 65/79 [01:09<00:14,  1.07s/batch][A
Testing:  89%|████████▊ | 70/79 [01:15<00:09,  1.07s/batch][A
Testing:  95%|█████████▍| 75/79 [01:20<00:04,  1.07s/batch][ATesting: 100%|██████████| 79/79 [01:24<00:00,  1.06s/batch]
[25/05/20 11:19:21] [train_TET.py:  225]: Test set Accuracy: 25.77
Training:  10%|█         | 20/200 [2:19:55<21:44:20, 434.78s/epoch]Training:  10%|█         | 21/200 [2:26:38<21:09:19, 425.47s/epoch]Training:  11%|█         | 22/200 [2:33:22<20:43:06, 419.02s/epoch]Training:  12%|█▏        | 23/200 [2:40:07<20:23:03, 414.59s/epoch]Training:  12%|█▏        | 24/200 [2:46:50<20:06:42, 411.38s/epoch]
Testing:   0%|          | 0/79 [00:00<?, ?batch/s][A
Testing:   6%|▋         | 5/79 [00:05<01:22,  1.12s/batch][A
Testing:  13%|█▎        | 10/79 [00:10<01:15,  1.09s/batch][A
Testing:  19%|█▉        | 15/79 [00:16<01:09,  1.08s/batch][A
Testing:  25%|██▌       | 20/79 [00:21<01:03,  1.08s/batch][A
Testing:  32%|███▏      | 25/79 [00:27<00:58,  1.08s/batch][A
Testing:  38%|███▊      | 30/79 [00:32<00:52,  1.07s/batch][A
Testing:  44%|████▍     | 35/79 [00:37<00:47,  1.07s/batch][A
Testing:  51%|█████     | 40/79 [00:43<00:41,  1.07s/batch][A
Testing:  57%|█████▋    | 45/79 [00:48<00:36,  1.07s/batch][A
Testing:  63%|██████▎   | 50/79 [00:53<00:31,  1.07s/batch][A
Testing:  70%|██████▉   | 55/79 [00:59<00:25,  1.07s/batch][A
Testing:  76%|███████▌  | 60/79 [01:04<00:20,  1.07s/batch][A
Testing:  82%|████████▏ | 65/79 [01:09<00:14,  1.07s/batch][A
Testing:  89%|████████▊ | 70/79 [01:15<00:09,  1.07s/batch][A
Testing:  95%|█████████▍| 75/79 [01:20<00:04,  1.07s/batch][ATesting: 100%|██████████| 79/79 [01:23<00:00,  1.06s/batch]
[25/05/20 11:54:25] [train_TET.py:  225]: Test set Accuracy: 27.46
Training:  12%|█▎        | 25/200 [2:54:59<21:07:29, 434.57s/epoch]slurmstepd: error: *** JOB 11932921 ON gcn13 CANCELLED AT 2025-05-20T11:59:09 DUE TO TIME LIMIT ***

JOB STATISTICS
==============
Job ID: 11932921
Cluster: snellius
User/Group: jhutter/jhutter
State: TIMEOUT (exit code 0)
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 2-06:01:30 core-walltime
Job Wall-clock time: 03:00:05
Memory Utilized: 2.18 GB
Memory Efficiency: 1.82% of 120.00 GB (120.00 GB/node)
